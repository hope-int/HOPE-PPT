<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>CodeFlash AI | Professional Programming Learning Platform</title>
    <meta name="description" content="Professional programming learning platform with AI-powered adaptive flashcards">
    <meta name="keywords" content="programming, learning, flashcards, OOP, Java, Python, C++, AI, professional">
    <meta name="author" content="CodeFlash AI Team">
    <meta name="robots" content="index, follow">
    <link rel="canonical" href="https://codeflash-ai.vercel.app">
    
    <!-- Open Graph (OG) Tags -->
    <meta property="og:title" content="CodeFlash AI | Professional Programming Learning Platform">
    <meta property="og:description" content="Professional programming learning platform with AI-powered adaptive flashcards">
    <meta property="og:image" content="https://i.ibb.co/3yMXpZ71/codeflash-ai-preview.jpg">
    <meta property="og:url" content="https://codeflash-ai.vercel.app">
    <meta property="og:type" content="website">
    <meta property="og:site_name" content="CodeFlash AI">
    <meta property="og:locale" content="en_US">
    
    <!-- Twitter Card Tags -->
    <meta name="twitter:card" content="summary_large_image">
    <meta name="twitter:title" content="CodeFlash AI | Professional Programming Learning Platform">
    <meta name="twitter:description" content="Professional programming learning platform with AI-powered adaptive flashcards">
    <meta name="twitter:image" content="https://codeflash-ai.vercel.app/images/twitter-preview.jpg">
    <meta name="twitter:site" content="@codeflashai">
    
    <!-- Additional Meta Tags -->
    <meta name="theme-color" content="#1a1a2e">
    <meta name="msapplication-TileColor" content="#1a1a2e">
    <meta name="application-name" content="CodeFlash AI">
    <meta name="apple-mobile-web-app-title" content="CodeFlash AI">
    <meta name="apple-mobile-web-app-capable" content="yes">
    <meta name="apple-mobile-web-app-status-bar-style" content="black-translucent">
    
    <!-- Favicon -->
    <link rel="icon" type="image/x-icon" href="/favicon.ico">
    <link rel="icon" type="image/png" sizes="16x16" href="/favicon-16x16.png">
    <link rel="icon" type="image/png" sizes="32x32" href="/favicon-32x32.png">
    <link rel="apple-touch-icon" sizes="180x180" href="/apple-touch-icon.png">
    <link rel="manifest" href="/site.webmanifest">
    
    <!-- Google Fonts -->
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700&display=swap" rel="stylesheet">
    
    <!-- Scripts -->
    <script src="https://cdnjs.cloudflare.com/ajax/libs/three.js/r128/three.min.js"></script>
    <script src="https://unpkg.com/@lottiefiles/lottie-player@latest/dist/lottie-player.js"></script>
    
    <style>
        /* Base Styles */
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
            font-family: 'Inter', sans-serif;
        }

        body {
            background: linear-gradient(135deg, #0f0f1e, #1a1a2e, #16213e);
            color: #e8e8e8;
            min-height: 100vh;
            display: flex;
            flex-direction: column;
            align-items: center;
            padding: 20px;
            position: relative;
            overflow-x: hidden;
        }

        #three-background {
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            z-index: -1;
        }

        .container {
            width: 100%;
            max-width: 1200px;
            margin: 0 auto;
            background: rgba(26, 26, 46, 0.8);
            backdrop-filter: blur(20px);
            border-radius: 16px;
            padding: 40px;
            box-shadow: 0 20px 40px rgba(0, 0, 0, 0.4);
            border: 1px solid rgba(255, 255, 255, 0.1);
            margin-bottom: 100px;
        }

        h1 {
            text-align: center;
            margin-bottom: 40px;
            font-size: 2.5rem;
            font-weight: 700;
            color: #ffffff;
            letter-spacing: -0.5px;
        }

        h2 {
            text-align: center;
            margin-bottom: 30px;
            font-size: 2rem;
            color: #ffffff;
            font-weight: 600;
            letter-spacing: -0.3px;
        }

        .section {
            display: none;
            animation: fadeIn 0.6s ease-in-out;
        }

        .section.active {
            display: block;
        }

        @keyframes fadeIn {
            from { opacity: 0; transform: translateY(20px); }
            to { opacity: 1; transform: translateY(0); }
        }

        .form-group {
            margin-bottom: 24px;
        }

        label {
            display: block;
            margin-bottom: 8px;
            font-weight: 500;
            color: #b8b8b8;
            font-size: 0.95rem;
            letter-spacing: 0.3px;
        }

        input, textarea, select {
            width: 100%;
            padding: 14px 16px;
            border: 1px solid rgba(255, 255, 255, 0.1);
            border-radius: 8px;
            background: rgba(255, 255, 255, 0.05);
            color: #ffffff;
            font-size: 1rem;
            font-family: 'Inter', sans-serif;
            transition: all 0.3s ease;
        }

        input:focus, textarea:focus, select:focus {
            outline: none;
            background: rgba(255, 255, 255, 0.08);
            border-color: #4a9eff;
            box-shadow: 0 0 0 3px rgba(74, 158, 255, 0.1);
        }

        input::placeholder, textarea::placeholder {
            color: #666;
        }

        button {
            background: linear-gradient(135deg, #4a9eff, #0066ff);
            color: white;
            border: none;
            padding: 12px 24px;
            border-radius: 8px;
            cursor: pointer;
            font-size: 1rem;
            font-weight: 500;
            transition: all 0.3s ease;
            margin-right: 12px;
            margin-top: 12px;
            font-family: 'Inter', sans-serif;
            box-shadow: 0 4px 12px rgba(74, 158, 255, 0.3);
        }

        button:hover {
            transform: translateY(-2px);
            box-shadow: 0 6px 20px rgba(74, 158, 255, 0.4);
            background: linear-gradient(135deg, #5aa8ff, #1a75ff);
        }

        button:disabled {
            opacity: 0.5;
            cursor: not-allowed;
            transform: none;
        }

        .loading-screen {
            display: flex;
            flex-direction: column;
            align-items: center;
            justify-content: center;
            height: 60vh;
        }

        .loading-text {
            font-size: 1.8rem;
            margin-bottom: 24px;
            animation: pulse 2s infinite;
            text-align: center;
            color: #4a9eff;
            font-weight: 500;
        }

        .loading-credit {
            font-size: 1.1rem;
            margin-top: 12px;
            opacity: 0;
            animation: fadeIn 1s forwards;
            animation-delay: 0.5s;
            color: #888;
        }

        .loading-credit:nth-child(3) {
            animation-delay: 1s;
        }

        @keyframes pulse {
            0% { opacity: 0.6; }
            50% { opacity: 1; }
            100% { opacity: 0.6; }
        }

        .question-container {
            background: rgba(255, 255, 255, 0.05);
            backdrop-filter: blur(10px);
            padding: 24px;
            border-radius: 12px;
            margin-bottom: 20px;
            border: 1px solid rgba(255, 255, 255, 0.1);
            box-shadow: 0 8px 32px rgba(0, 0, 0, 0.2);
        }

        .progress-bar {
            height: 6px;
            background: rgba(255, 255, 255, 0.1);
            border-radius: 3px;
            margin-bottom: 24px;
            overflow: hidden;
        }

        .progress-fill {
            height: 100%;
            background: linear-gradient(90deg, #4a9eff, #0066ff);
            width: 0%;
            transition: width 0.4s ease;
        }

        .history-item {
            background: rgba(255, 255, 255, 0.05);
            backdrop-filter: blur(10px);
            padding: 20px;
            border-radius: 12px;
            margin-bottom: 12px;
            display: flex;
            justify-content: space-between;
            align-items: center;
            border: 1px solid rgba(255, 255, 255, 0.1);
            box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);
        }

        .history-item button {
            padding: 8px 16px;
            font-size: 0.9rem;
        }

        .notification {
            position: fixed;
            top: 20px;
            right: 20px;
            background: rgba(74, 158, 255, 0.9);
            backdrop-filter: blur(10px);
            color: white;
            padding: 16px 20px;
            border-radius: 8px;
            box-shadow: 0 8px 24px rgba(0, 0, 0, 0.3);
            transform: translateX(120%);
            transition: transform 0.3s ease;
            z-index: 1000;
            border: 1px solid rgba(255, 255, 255, 0.2);
            font-size: 0.95rem;
        }

        .notification.show {
            transform: translateX(0);
        }

        .notification.error {
            background: rgba(239, 68, 68, 0.9);
        }

        .generating-animation {
            display: flex;
            flex-direction: column;
            align-items: center;
            justify-content: center;
            height: 60vh;
        }

        .generating-text {
            font-size: 1.8rem;
            margin-bottom: 24px;
            text-align: center;
            color: #4a9eff;
            font-weight: 500;
        }

        .lottie-container {
            width: 200px;
            height: 200px;
            margin: 20px 0;
        }

        footer {
            position: fixed;
            bottom: 0;
            left: 0;
            width: 100%;
            background: rgba(26, 26, 46, 0.9);
            backdrop-filter: blur(15px);
            padding: 16px;
            text-align: center;
            color: #888;
            font-size: 0.9rem;
            border-top: 1px solid rgba(255, 255, 255, 0.1);
            z-index: 100;
        }

        .option-container {
            margin-top: 16px;
        }

        .option {
            display: block;
            background: rgba(255, 255, 255, 0.05);
            border: 1px solid rgba(255, 255, 255, 0.1);
            border-radius: 8px;
            padding: 16px;
            margin-bottom: 12px;
            cursor: pointer;
            transition: all 0.3s ease;
            color: #e8e8e8;
        }

        .option:hover {
            background: rgba(74, 158, 255, 0.1);
            border-color: #4a9eff;
            transform: translateY(-1px);
        }

        .option.selected {
            background: rgba(74, 158, 255, 0.2);
            border-color: #4a9eff;
        }

        .option input[type="radio"] {
            display: none;
        }

        .splash-screen {
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background: linear-gradient(135deg, #0f0f1e, #1a1a2e, #16213e);
            display: flex;
            flex-direction: column;
            justify-content: center;
            align-items: center;
            z-index: 10000;
            transition: opacity 1s ease;
        }

        .splash-content {
            text-align: center;
            max-width: 600px;
            padding: 40px;
        }

        .splash-title {
            font-size: 3rem;
            margin-bottom: 20px;
            color: #ffffff;
            font-weight: 700;
            letter-spacing: -0.5px;
        }

        .splash-subtitle {
            font-size: 1.2rem;
            margin-bottom: 32px;
            color: #b8b8b8;
            font-weight: 400;
        }

        .splash-animation {
            width: 300px;
            height: 300px;
            margin: 20px auto;
        }

        .splash-footer {
            margin-top: 40px;
            padding: 24px;
            background: rgba(255, 255, 255, 0.05);
            backdrop-filter: blur(10px);
            border-radius: 12px;
            border: 1px solid rgba(255, 255, 255, 0.1);
        }

        .splash-continue {
            margin-top: 32px;
            padding: 14px 32px;
            font-size: 1.1rem;
            background: linear-gradient(135deg, #4a9eff, #0066ff);
            border: none;
            color: white;
            border-radius: 8px;
            cursor: pointer;
            transition: all 0.3s ease;
            font-weight: 500;
            box-shadow: 0 4px 12px rgba(74, 158, 255, 0.3);
        }

        .splash-continue:hover {
            transform: translateY(-2px);
            box-shadow: 0 6px 20px rgba(74, 158, 255, 0.4);
        }

        /* Language Selection Styles */
        .language-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
            gap: 20px;
            margin-top: 24px;
        }

        .language-card {
            background: rgba(255, 255, 255, 0.05);
            backdrop-filter: blur(10px);
            border-radius: 12px;
            padding: 24px;
            border: 1px solid rgba(255, 255, 255, 0.1);
            box-shadow: 0 8px 32px rgba(0, 0, 0, 0.1);
            cursor: pointer;
            transition: all 0.3s ease;
            text-align: center;
            color: #e8e8e8;
        }

        .language-card:hover {
            transform: translateY(-4px);
            box-shadow: 0 12px 40px rgba(74, 158, 255, 0.2);
            border-color: #4a9eff;
        }

        .language-card.selected {
            background: rgba(74, 158, 255, 0.2);
            border-color: #4a9eff;
        }

        .language-icon {
            font-size: 2.5rem;
            margin-bottom: 12px;
        }

        .language-name {
            font-size: 1.3rem;
            font-weight: 600;
            margin-bottom: 8px;
            color: #ffffff;
        }

        .language-description {
            font-size: 0.95rem;
            color: #b8b8b8;
            line-height: 1.4;
        }

        /* Flashcard Styles */
        .flashcard-container {
            perspective: 1000px;
            width: 100%;
            height: 400px;
            margin: 24px 0;
        }

        .flashcard {
            width: 100%;
            height: 100%;
            position: relative;
            transform-style: preserve-3d;
            transition: transform 0.7s;
            cursor: pointer;
        }

        .flashcard.flipped {
            transform: rotateY(180deg);
        }

        .flashcard-face {
            position: absolute;
            width: 100%;
            height: 100%;
            backface-visibility: hidden;
            border-radius: 12px;
            background: rgba(255, 255, 255, 0.05);
            backdrop-filter: blur(10px);
            border: 1px solid rgba(255, 255, 255, 0.1);
            box-shadow: 0 8px 32px rgba(0, 0, 0, 0.1);
            display: flex;
            flex-direction: column;
            justify-content: center;
            align-items: center;
            padding: 32px;
            text-align: center;
        }

        .flashcard-back {
            transform: rotateY(180deg);
        }

        .flashcard-title {
            font-size: 1.4rem;
            margin-bottom: 20px;
            color: #4a9eff;
            font-weight: 600;
        }

        .flashcard-content {
            font-size: 1.1rem;
            line-height: 1.6;
            color: #e8e8e8;
        }

        .flashcard-code {
            background: rgba(0, 0, 0, 0.3);
            border-radius: 8px;
            padding: 16px;
            margin: 16px 0;
            font-family: 'SF Mono', 'Monaco', 'Inconsolata', 'Roboto Mono', monospace;
            text-align: left;
            overflow-x: auto;
            border: 1px solid rgba(255, 255, 255, 0.1);
        }

        .flashcard-controls {
            display: flex;
            justify-content: space-between;
            margin-top: 24px;
        }

        .difficulty-indicator {
            display: flex;
            align-items: center;
            margin-top: 16px;
            justify-content: center;
        }

        .difficulty-label {
            font-size: 0.95rem;
            margin-right: 8px;
            color: #b8b8b8;
        }

        .difficulty-dot {
            width: 12px;
            height: 12px;
            border-radius: 50%;
            margin: 0 4px;
        }

        .difficulty-easy { background-color: #10b981; }
        .difficulty-medium { background-color: #f59e0b; }
        .difficulty-hard { background-color: #ef4444; }

        /* Chapter Progress Styles */
        .chapter-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
            gap: 20px;
            margin-top: 24px;
        }

        .chapter-card {
            background: rgba(255, 255, 255, 0.05);
            backdrop-filter: blur(10px);
            border-radius: 12px;
            padding: 24px;
            border: 1px solid rgba(255, 255, 255, 0.1);
            box-shadow: 0 8px 32px rgba(0, 0, 0, 0.1);
            cursor: pointer;
            transition: all 0.3s ease;
            color: #e8e8e8;
        }

        .chapter-card:hover {
            transform: translateY(-4px);
            box-shadow: 0 12px 40px rgba(74, 158, 255, 0.2);
            border-color: #4a9eff;
        }

        .chapter-card.completed {
            background: rgba(16, 185, 129, 0.1);
            border-color: #10b981;
        }

        .chapter-card.current {
            background: rgba(74, 158, 255, 0.1);
            border-color: #4a9eff;
        }

        .chapter-title {
            font-size: 1.3rem;
            margin-bottom: 12px;
            color: #ffffff;
            font-weight: 600;
        }

        .chapter-description {
            font-size: 0.95rem;
            color: #b8b8b8;
            margin-bottom: 16px;
            line-height: 1.4;
        }

        .chapter-progress {
            height: 6px;
            background: rgba(255, 255, 255, 0.1);
            border-radius: 3px;
            overflow: hidden;
            margin-bottom: 12px;
        }

        .chapter-progress-fill {
            height: 100%;
            background: linear-gradient(90deg, #4a9eff, #0066ff);
            width: 0%;
            transition: width 0.4s ease;
        }

        .chapter-stats {
            display: flex;
            justify-content: space-between;
            font-size: 0.85rem;
            color: #888;
        }

        /* Dashboard Styles */
        .dashboard-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(350px, 1fr));
            gap: 24px;
            margin-top: 24px;
        }

        .dashboard-card {
            background: rgba(255, 255, 255, 0.05);
            backdrop-filter: blur(10px);
            border-radius: 12px;
            padding: 24px;
            border: 1px solid rgba(255, 255, 255, 0.1);
            box-shadow: 0 8px 32px rgba(0, 0, 0, 0.1);
            color: #e8e8e8;
        }

        .dashboard-title {
            font-size: 1.2rem;
            margin-bottom: 20px;
            color: #ffffff;
            font-weight: 600;
        }

        .stat-item {
            display: flex;
            justify-content: space-between;
            margin-bottom: 12px;
            padding-bottom: 12px;
            border-bottom: 1px solid rgba(255, 255, 255, 0.05);
        }

        .stat-item:last-child {
            border-bottom: none;
        }

        .stat-label {
            color: #b8b8b8;
            font-size: 0.95rem;
        }

        .stat-value {
            font-weight: 600;
            color: #4a9eff;
            font-size: 1rem;
        }

        .profile-btn {
            position: fixed;
            bottom: 120px;
            right: 20px;
            width: 56px;
            height: 56px;
            border-radius: 50%;
            background: linear-gradient(135deg, #4a9eff, #0066ff);
            color: white;
            border: none;
            display: flex;
            justify-content: center;
            align-items: center;
            font-size: 24px;
            cursor: pointer;
            box-shadow: 0 4px 12px rgba(74, 158, 255, 0.3);
            z-index: 99;
            transition: all 0.3s ease;
        }

        .profile-btn:hover {
            transform: scale(1.05);
            box-shadow: 0 6px 20px rgba(74, 158, 255, 0.4);
        }

        /* Tutorial Section Styles */
        .tutorial-section {
            max-width: 800px;
            margin: 0 auto;
            padding: 24px;
        }

        .tutorial-header {
            text-align: center;
            margin-bottom: 40px;
        }

        .tutorial-header h2 {
            font-size: 2.2rem;
            margin-bottom: 16px;
            color: #ffffff;
            font-weight: 600;
        }

        .tutorial-header p {
            font-size: 1.1rem;
            color: #b8b8b8;
        }

        .tutorial-steps {
            display: flex;
            flex-direction: column;
            gap: 24px;
        }

        .tutorial-step {
            background: rgba(255, 255, 255, 0.05);
            backdrop-filter: blur(10px);
            border-radius: 12px;
            padding: 24px;
            border: 1px solid rgba(255, 255, 255, 0.1);
            box-shadow: 0 8px 32px rgba(0, 0, 0, 0.1);
            color: #e8e8e8;
        }

        .step-number {
            display: inline-block;
            width: 32px;
            height: 32px;
            background: linear-gradient(135deg, #4a9eff, #0066ff);
            border-radius: 50%;
            text-align: center;
            line-height: 32px;
            font-weight: 600;
            margin-bottom: 16px;
            color: white;
            font-size: 0.9rem;
        }

        .step-content h3 {
            font-size: 1.3rem;
            margin-bottom: 12px;
            color: #ffffff;
            font-weight: 600;
        }

        .step-content p {
            margin-bottom: 16px;
            line-height: 1.6;
            color: #e8e8e8;
            font-size: 1rem;
        }

        .step-content ul {
            margin-left: 20px;
            margin-bottom: 16px;
        }

        .step-content li {
            margin-bottom: 8px;
            color: #e8e8e8;
            font-size: 1rem;
        }

        .tutorial-actions {
            text-align: center;
            margin-top: 32px;
        }

        .tutorial-note {
            background: rgba(74, 158, 255, 0.1);
            border-left: 4px solid #4a9eff;
            padding: 16px;
            border-radius: 8px;
            margin: 20px 0;
        }

        .tutorial-note p {
            margin: 0;
            color: #e8e8e8;
            font-size: 0.95rem;
        }

        /* Quiz Styles */
        .quiz-container {
            background: rgba(255, 255, 255, 0.05);
            backdrop-filter: blur(10px);
            border-radius: 12px;
            padding: 24px;
            border: 1px solid rgba(255, 255, 255, 0.1);
            box-shadow: 0 8px 32px rgba(0, 0, 0, 0.1);
            margin-bottom: 20px;
            color: #e8e8e8;
        }

        .quiz-question {
            font-size: 1.2rem;
            margin-bottom: 20px;
            color: #ffffff;
            font-weight: 600;
        }

        .quiz-options {
            display: flex;
            flex-direction: column;
            gap: 12px;
        }

        .quiz-option {
            background: rgba(255, 255, 255, 0.05);
            border: 1px solid rgba(255, 255, 255, 0.1);
            border-radius: 8px;
            padding: 16px;
            cursor: pointer;
            transition: all 0.3s ease;
            color: #e8e8e8;
            font-size: 1rem;
        }

        .quiz-option:hover {
            background: rgba(74, 158, 255, 0.1);
            border-color: #4a9eff;
            transform: translateY(-1px);
        }

        .quiz-option.selected {
            background: rgba(74, 158, 255, 0.2);
            border-color: #4a9eff;
        }

        .quiz-option.correct {
            background: rgba(16, 185, 129, 0.2);
            border-color: #10b981;
        }

        .quiz-option.incorrect {
            background: rgba(239, 68, 68, 0.2);
            border-color: #ef4444;
        }

        .quiz-feedback {
            margin-top: 16px;
            padding: 16px;
            border-radius: 8px;
            background: rgba(74, 158, 255, 0.1);
            border-left: 4px solid #4a9eff;
            font-size: 0.95rem;
        }

        .quiz-score {
            text-align: center;
            font-size: 1.8rem;
            margin: 24px 0;
            color: #4a9eff;
            font-weight: 600;
        }

        /* Professional Elements */
        .badge {
            display: inline-block;
            background: rgba(74, 158, 255, 0.2);
            color: #4a9eff;
            padding: 4px 12px;
            border-radius: 16px;
            font-size: 0.85rem;
            font-weight: 500;
            margin: 4px;
            border: 1px solid rgba(74, 158, 255, 0.3);
        }

        .badge.success {
            background: rgba(16, 185, 129, 0.2);
            color: #10b981;
            border-color: rgba(16, 185, 129, 0.3);
        }

        .badge.warning {
            background: rgba(245, 158, 11, 0.2);
            color: #f59e0b;
            border-color: rgba(245, 158, 11, 0.3);
        }

        .badge.error {
            background: rgba(239, 68, 68, 0.2);
            color: #ef4444;
            border-color: rgba(239, 68, 68, 0.3);
        }

        /* Status Indicators */
        .status-indicator {
            display: inline-flex;
            align-items: center;
            gap: 8px;
            padding: 8px 16px;
            background: rgba(255, 255, 255, 0.05);
            border-radius: 20px;
            font-size: 0.9rem;
            color: #b8b8b8;
        }

        .status-indicator.active {
            background: rgba(16, 185, 129, 0.1);
            color: #10b981;
        }

        .status-indicator.pending {
            background: rgba(245, 158, 11, 0.1);
            color: #f59e0b;
        }

        .status-dot {
            width: 8px;
            height: 8px;
            border-radius: 50%;
            background: currentColor;
        }

        /* Responsive Design */
        @media (max-width: 768px) {
            .container {
                padding: 24px;
            }
            
            h1 {
                font-size: 2rem;
            }
            
            button {
                width: 100%;
                margin-right: 0;
            }
            
            .splash-title {
                font-size: 2.5rem;
            }
            
            .splash-subtitle {
                font-size: 1.1rem;
            }

            .tutorial-header h2 {
                font-size: 1.8rem;
            }

            .step-content h3 {
                font-size: 1.2rem;
            }

            .language-grid {
                grid-template-columns: 1fr;
            }

            .chapter-grid {
                grid-template-columns: 1fr;
            }

            .dashboard-grid {
                grid-template-columns: 1fr;
            }
        }
    </style>
</head>
<body>
    <!-- Splash Screen -->
    <div id="splash-screen" class="splash-screen">
        <div class="splash-content">
            <h1 class="splash-title">CodeFlash AI</h1>
            <p class="splash-subtitle">Professional Programming Learning Platform</p>
            <div class="splash-animation">
                <lottie-player src="https://assets4.lottiefiles.com/packages/lf20_DMgKk1.json" background="transparent" speed="1" loop autoplay></lottie-player>
            </div>
            <div class="splash-footer">
                <p>Adaptive Learning Powered by AI</p>
                <p>Master Programming Concepts Efficiently</p>
            </div>
            <button class="splash-continue" id="continue-to-app">Get Started</button>
        </div>
    </div>

    <div id="three-background"></div>
    
    <div class="container">
        <h1>CodeFlash AI</h1>
        
        <!-- Tutorial Section -->
        <div id="tutorial-section" class="section">
            <div class="tutorial-section">
                <div class="tutorial-header">
                    <h2>Welcome to CodeFlash AI</h2>
                    <p>Professional programming learning with AI-powered adaptive flashcards</p>
                </div>
                
                <div class="tutorial-steps">
                    <div class="tutorial-step">
                        <div class="step-number">1</div>
                        <div class="step-content">
                            <h3>Create Your Profile</h3>
                            <p>Your profile serves as your personalized learning dashboard where we track progress and customize content based on your learning patterns.</p>
                            <div class="tutorial-note">
                                <p><strong>Note:</strong> All data is stored locally on your device for privacy and security.</p>
                            </div>
                        </div>
                    </div>
                    
                    <div class="tutorial-step">
                        <div class="step-number">2</div>
                        <div class="step-content">
                            <h3>Select Programming Language</h3>
                            <p>Choose from our comprehensive language offerings. Each curriculum is designed to cover fundamental to advanced concepts.</p>
                            <ul>
                                <li>Java - Enterprise applications and OOP principles</li>
                                <li>Python - Versatile programming and data science</li>
                                <li>C++ - System programming and performance</li>
                                <li>JavaScript - Web development and modern frameworks</li>
                            </ul>
                        </div>
                    </div>
                    
                    <div class="tutorial-step">
                        <div class="step-number">3</div>
                        <div class="step-content">
                            <h3>Configure AI Integration</h3>
                            <p>Connect your Gemini API key to enable personalized content generation and adaptive learning algorithms.</p>
                            <ul>
                                <li>Obtain API key from Google AI Studio</li>
                                <li>Enter credentials in the configuration panel</li>
                                <li>Begin AI-enhanced learning experience</li>
                            </ul>
                        </div>
                    </div>
                    
                    <div class="tutorial-step">
                        <div class="step-number">4</div>
                        <div class="step-content">
                            <h3>Adaptive Learning System</h3>
                            <p>Our AI analyzes your learning patterns and optimizes content delivery:</p>
                            <ul>
                                <li>Dynamic flashcard generation based on performance</li>
                                <li>Personalized difficulty adjustment</li>
                                <li>Comprehensive progress analytics</li>
                                <li>Spaced repetition for optimal retention</li>
                            </ul>
                        </div>
                    </div>
                </div>
                
                <div class="tutorial-actions">
                    <button id="got-it-btn" class="splash-continue">Continue to Setup</button>
                </div>
            </div>
        </div>
        
        <!-- Profile Creation Section -->
        <div id="profile-section" class="section">
            <h2>Create Your Profile</h2>
            <div class="form-group">
                <label for="user-name">Full Name</label>
                <input type="text" id="user-name" placeholder="Enter your full name">
            </div>
            <div class="form-group">
                <label for="learning-goal">Learning Objective</label>
                <select id="learning-goal">
                    <option value="beginner">Beginner - Starting programming journey</option>
                    <option value="student">Student - Academic learning</option>
                    <option value="professional">Professional - Career development</option>
                    <option value="hobby">Hobby - Personal interest</option>
                </select>
            </div>
            <div class="form-group">
                <label for="session-length">Preferred Session Duration</label>
                <select id="session-length">
                    <option value="15">15 minutes - Quick review</option>
                    <option value="30">30 minutes - Standard session</option>
                    <option value="45">45 minutes - Extended learning</option>
                    <option value="60">60 minutes - Deep dive</option>
                </select>
            </div>
            <button id="create-profile-btn">Create Profile</button>
            <div id="profile-status"></div>
        </div>
        
        <!-- Language Selection Section -->
        <div id="language-selection-section" class="section">
            <h2>Select Programming Language</h2>
            <p>Choose your primary programming language for focused learning.</p>
            <div class="language-grid">
                <div class="language-card selected" data-language="java">
                    <div class="language-icon">☕</div>
                    <div class="language-name">Java</div>
                    <div class="language-description">Enterprise applications and OOP principles</div>
                </div>
                <div class="language-card" data-language="python">
                    <div class="language-icon">🐍</div>
                    <div class="language-name">Python</div>
                    <div class="language-description">Versatile programming and data science</div>
                </div>
                <div class="language-card" data-language="cpp">
                    <div class="language-icon">⚙️</div>
                    <div class="language-name">C++</div>
                    <div class="language-description">System programming and performance</div>
                </div>
                <div class="language-card" data-language="javascript">
                    <div class="language-icon">🌐</div>
                    <div class="language-name">JavaScript</div>
                    <div class="language-description">Web development and modern frameworks</div>
                </div>
            </div>
            <button id="continue-to-api" style="margin-top: 24px;">Continue to API Setup</button>
        </div>
        
        <!-- API Key Section -->
        <div id="api-key-section" class="section">
            <h2>API Configuration</h2>
            <div class="form-group">
                <label for="api-key">Gemini API Key</label>
                <input type="password" id="api-key" placeholder="Enter your Gemini API key">
            </div>
            <button id="save-api-key">Save API Key</button>
            <div id="api-status"></div>
            <div style="margin-top: 24px;">
                <button id="show-tutorial-btn" style="background: rgba(74, 158, 255, 0.2);">View Tutorial</button>
            </div>
        </div>
        
        <!-- Loading Screen -->
        <div id="loading-section" class="section">
            <div class="loading-screen">
                <div class="loading-text">Initializing Learning Environment</div>
                <div class="loading-credit">Analyzing learning preferences</div>
                <div class="loading-credit">Generating personalized content</div>
                <div class="lottie-container">
                    <lottie-player src="https://assets9.lottiefiles.com/packages/lf20_DMgKk1.json" background="transparent" speed="1" loop autoplay></lottie-player>
                </div>
            </div>
        </div>
        
        <!-- Dashboard Section -->
        <div id="dashboard-section" class="section">
            <h2>Welcome back, <span id="user-display-name"></span></h2>
            <div class="dashboard-grid">
                <div class="dashboard-card">
                    <div class="dashboard-title">Learning Progress</div>
                    <div class="stat-item">
                        <span class="stat-label">Current Chapter</span>
                        <span class="stat-value" id="current-chapter">-</span>
                    </div>
                    <div class="stat-item">
                        <span class="stat-label">Completed Chapters</span>
                        <span class="stat-value" id="completed-chapters">0</span>
                    </div>
                    <div class="stat-item">
                        <span class="stat-label">Total Flashcards</span>
                        <span class="stat-value" id="total-flashcards">0</span>
                    </div>
                    <div class="stat-item">
                        <span class="stat-label">Mastered Concepts</span>
                        <span class="stat-value" id="mastered-concepts">0</span>
                    </div>
                </div>
                
                <div class="dashboard-card">
                    <div class="dashboard-title">Performance Analytics</div>
                    <div class="stat-item">
                        <span class="stat-label">Avg. Time per Card</span>
                        <span class="stat-value" id="avg-time">-</span>
                    </div>
                    <div class="stat-item">
                        <span class="stat-label">Peak Performance</span>
                        <span class="stat-value" id="best-time">-</span>
                    </div>
                    <div class="stat-item">
                        <span class="stat-label">Retention Rate</span>
                        <span class="stat-value" id="retention-rate">-</span>
                    </div>
                    <div class="stat-item">
                        <span class="stat-label">Learning Velocity</span>
                        <span class="stat-value" id="learning-velocity">-</span>
                    </div>
                </div>
                
                <div class="dashboard-card">
                    <div class="dashboard-title">AI Recommendations</div>
                    <div id="ai-recommendations">
                        <p>AI analysis in progress...</p>
                    </div>
                </div>
            </div>
            
            <div style="text-align: center; margin-top: 32px;">
                <button id="continue-learning-btn">Continue Learning</button>
                <button id="view-chapters-btn">View Chapters</button>
            </div>
        </div>
        
        <!-- Chapters Section -->
        <div id="chapters-section" class="section">
            <h2>Course Curriculum</h2>
            <div class="chapter-grid" id="chapter-grid">
                <!-- Chapters will be populated here -->
            </div>
            <div style="text-align: center; margin-top: 32px;">
                <button id="back-to-dashboard-btn">Back to Dashboard</button>
            </div>
        </div>
        
        <!-- Flashcard Section -->
        <div id="flashcard-section" class="section">
            <h2>Interactive Flashcards</h2>
            <div class="flashcard-container">
                <div class="flashcard" id="flashcard">
                    <div class="flashcard-face flashcard-front">
                        <div class="flashcard-title" id="flashcard-title">Click to reveal</div>
                        <div class="flashcard-content" id="flashcard-front-content">
                            Loading content...
                        </div>
                    </div>
                    <div class="flashcard-face flashcard-back">
                        <div class="flashcard-title">Answer</div>
                        <div class="flashcard-content" id="flashcard-back-content">
                            Loading answer...
                        </div>
                    </div>
                </div>
            </div>
            
            <div class="flashcard-controls">
                <button id="prev-flashcard-btn">Previous</button>
                <button id="flip-flashcard-btn">Flip Card</button>
                <button id="next-flashcard-btn">Next</button>
            </div>
            
            <div class="difficulty-indicator">
                <span class="difficulty-label">Difficulty Rating</span>
                <div class="difficulty-dot difficulty-easy"></div>
                <div class="difficulty-dot difficulty-medium"></div>
                <div class="difficulty-dot difficulty-hard"></div>
            </div>
            
            <div style="text-align: center; margin-top: 32px;">
                <button id="mark-easy-btn">Easy</button>
                <button id="mark-medium-btn">Medium</button>
                <button id="mark-hard-btn">Hard</button>
                <button id="complete-chapter-btn">Complete Chapter</button>
            </div>
        </div>
        
        <!-- Quiz Section -->
        <div id="quiz-section" class="section">
            <h2>Chapter Assessment</h2>
            <div id="quiz-container">
                <!-- Quiz questions will be populated here -->
            </div>
            <div id="quiz-score" class="quiz-score" style="display: none;">
                Score: <span id="score-value">0</span>%
            </div>
            <div style="text-align: center; margin-top: 32px;">
                <button id="submit-quiz-btn" style="display: none;">Submit Quiz</button>
                <button id="next-chapter-btn" style="display: none;">Next Chapter</button>
                <button id="back-to-chapters-btn">Back to Chapters</button>
            </div>
        </div>
        
        <!-- Profile Section -->
        <div id="profile-view-section" class="section">
            <h2>Profile Management</h2>
            <div class="dashboard-card">
                <div class="dashboard-title">Account Information</div>
                <div class="stat-item">
                    <span class="stat-label">Name</span>
                    <span class="stat-value" id="profile-name">-</span>
                </div>
                <div class="stat-item">
                    <span class="stat-label">Account ID</span>
                    <span class="stat-value" id="profile-key">-</span>
                </div>
                <div class="stat-item">
                    <span class="stat-label">Created</span>
                    <span class="stat-value" id="profile-created">-</span>
                </div>
                <div class="stat-item">
                    <span class="stat-label">Language</span>
                    <span class="stat-value" id="profile-language">-</span>
                </div>
            </div>
            
            <div class="dashboard-card" style="margin-top: 24px;">
                <div class="dashboard-title">Learning Statistics</div>
                <div class="stat-item">
                    <span class="stat-label">Total Study Time</span>
                    <span class="stat-value" id="total-study-time">0 minutes</span>
                </div>
                <div class="stat-item">
                    <span class="stat-label">Sessions Completed</span>
                    <span class="stat-value" id="sessions-completed">0</span>
                </div>
                <div class="stat-item">
                    <span class="stat-label">Average Quiz Score</span>
                    <span class="stat-value" id="avg-quiz-score">0%</span>
                </div>
                <div class="stat-item">
                    <span class="stat-label">Current Streak</span>
                    <span class="stat-value" id="current-streak">0 days</span>
                </div>
            </div>
            
            <div style="text-align: center; margin-top: 32px;">
                <button id="export-data-btn">Export Data</button>
                <button id="reset-progress-btn" style="background: rgba(239, 68, 68, 0.2);">Reset Progress</button>
                <button id="back-to-dashboard-from-profile-btn">Back to Dashboard</button>
            </div>
        </div>
    </div>
    
    <footer>
        CodeFlash AI | Professional Programming Learning Platform
    </footer>
    
    <button class="profile-btn" id="profile-toggle" title="View Profile">👤</button>
    
    <div id="notification" class="notification"></div>

    <script>
        // Application State
        const appState = {
            // User Profile
            userName: '',
            userKey: '',
            createdDate: '',
            learningGoal: '',
            sessionLength: 30,
            selectedLanguage: 'java',
            
            // API Configuration
            apiKey: '',
            
            // Learning Progress
            currentChapter: 1,
            completedChapters: [],
            totalFlashcards: 0,
            masteredConcepts: 0,
            
            // Learning Patterns
            flashcardData: {},
            quizScores: {},
            timeSpent: {},
            learningPatterns: {
                averageTimePerFlashcard: 0,
                peakPerformanceTime: '',
                difficultConcepts: [],
                preferredLearningStyle: '',
                retentionRate: 0,
                commonMistakes: []
            },
            
            // AI Recommendations
            aiRecommendations: {
                nextFocusAreas: [],
                suggestedReviewTopics: [],
                adaptedContent: false,
                personalizedHints: false,
                difficultyAdjustment: 0
            },
            
            // Current Session
            currentFlashcardIndex: 0,
            currentFlashcards: [],
            currentQuiz: [],
            currentQuizAnswers: [],
            sessionStartTime: null,
            
            // Chapter Content
            chapters: {},
            
            // UI State
            hasSeenTutorial: false,
            currentSection: 'splash'
        };

        // Programming Language Content Structure
        const languageContent = {
            java: {
                name: 'Java',
                icon: '☕',
                chapters: [
                    {
                        id: 1,
                        title: 'Introduction to Object-Oriented Programming',
                        description: 'Understanding the fundamentals of OOP paradigm',
                        topics: [
                            'Definition and principles of OOP',
                            'Comparison with procedural programming',
                            'Benefits and advantages of OOP',
                            'Real-world applications and examples'
                        ]
                    },
                    {
                        id: 2,
                        title: 'Classes and Objects',
                        description: 'The fundamental building blocks of OOP',
                        topics: [
                            'Class definition and structure',
                            'Object creation and instantiation',
                            'The new keyword and memory allocation',
                            'Relationship between classes and objects'
                        ]
                    },
                    {
                        id: 3,
                        title: 'Encapsulation',
                        description: 'Data hiding and protection mechanisms',
                        topics: [
                            'Access modifiers and visibility',
                            'Getters and setters implementation',
                            'Private vs public members',
                            'Data security and integrity'
                        ]
                    },
                    {
                        id: 4,
                        title: 'Inheritance',
                        description: 'Code reuse through hierarchical relationships',
                        topics: [
                            'Base and derived classes',
                            'The extends keyword',
                            'Types of inheritance',
                            'Method overriding and polymorphism'
                        ]
                    },
                    {
                        id: 5,
                        title: 'Polymorphism',
                        description: 'Multiple forms of the same interface',
                        topics: [
                            'Compile-time polymorphism',
                            'Runtime polymorphism',
                            'Method overloading',
                            'Dynamic binding and late binding'
                        ]
                    },
                    {
                        id: 6,
                        title: 'Abstraction',
                        description: 'Hiding complexity while showing essential features',
                        topics: [
                            'Abstract classes and methods',
                            'Interfaces and contracts',
                            'Implementation details',
                            'Benefits of abstraction'
                        ]
                    },
                    {
                        id: 7,
                        title: 'Constructors',
                        description: 'Object initialization and setup',
                        topics: [
                            'Default constructors',
                            'Parameterized constructors',
                            'Constructor overloading',
                            'The this keyword usage'
                        ]
                    },
                    {
                        id: 8,
                        title: 'Static Members',
                        description: 'Class-level variables and methods',
                        topics: [
                            'Static variables and constants',
                            'Static methods and properties',
                            'Static blocks and initialization',
                            'Static vs instance members'
                        ]
                    },
                    {
                        id: 9,
                        title: 'The Super Keyword',
                        description: 'Accessing parent class members',
                        topics: [
                            'Super with variables',
                            'Super with methods',
                            'Super with constructors',
                            'Super vs this comparison'
                        ]
                    },
                    {
                        id: 10,
                        title: 'Packages',
                        description: 'Organizing classes into namespaces',
                        topics: [
                            'Package declaration and structure',
                            'Import statements and dependencies',
                            'Built-in Java packages',
                            'Creating custom packages'
                        ]
                    },
                    {
                        id: 11,
                        title: 'Advanced OOP Features',
                        description: 'Sophisticated OOP concepts and patterns',
                        topics: [
                            'High modularity principles',
                            'Code reusability strategies',
                            'Layers of abstraction',
                            'Message passing paradigms'
                        ]
                    },
                    {
                        id: 12,
                        title: 'OOP Best Practices',
                        description: 'Industry standards and design patterns',
                        topics: [
                            'SOLID principles',
                            'Design patterns overview',
                            'Code organization strategies',
                            'Common anti-patterns to avoid'
                        ]
                    }
                ]
            },
            python: {
                name: 'Python',
                icon: '🐍',
                chapters: [
                    {
                        id: 1,
                        title: 'Python OOP Fundamentals',
                        description: 'Understanding object-oriented programming in Python',
                        topics: [
                            'Python OOP basics and philosophy',
                            'Why use OOP in Python',
                            'Python vs other OOP languages',
                            'Real-world Python OOP applications'
                        ]
                    },
                    {
                        id: 2,
                        title: 'Classes and Objects in Python',
                        description: 'Creating and using Python classes',
                        topics: [
                            'Class definition syntax',
                            'Object instantiation',
                            '__init__ method and constructors',
                            'Instance variables and methods'
                        ]
                    },
                    {
                        id: 3,
                        title: 'Encapsulation in Python',
                        description: 'Data protection in Python classes',
                        topics: [
                            'Public, protected, private members',
                            'Name mangling mechanism',
                            'Property decorators',
                            'Getter and setter methods'
                        ]
                    },
                    {
                        id: 4,
                        title: 'Inheritance in Python',
                        description: 'Code reuse through inheritance',
                        topics: [
                            'Single inheritance',
                            'Multiple inheritance',
                            'Method Resolution Order (MRO)',
                            'Super() function usage'
                        ]
                    },
                    {
                        id: 5,
                        title: 'Polymorphism in Python',
                        description: 'Dynamic behavior in Python',
                        topics: [
                            'Duck typing philosophy',
                            'Method overriding',
                            'Operator overloading',
                            'Abstract base classes'
                        ]
                    },
                    {
                        id: 6,
                        title: 'Abstraction in Python',
                        description: 'Hiding implementation details',
                        topics: [
                            'Abstract classes',
                            'ABC module usage',
                            'Abstract methods',
                            'Concrete implementations'
                        ]
                    }
                ]
            },
            cpp: {
                name: 'C++',
                icon: '⚙️',
                chapters: [
                    {
                        id: 1,
                        title: 'C++ OOP Introduction',
                        description: 'Object-oriented programming in C++',
                        topics: [
                            'C++ OOP fundamentals',
                            'C vs C++ OOP features',
                            'Benefits of C++ OOP',
                            'C++ OOP application domains'
                        ]
                    },
                    {
                        id: 2,
                        title: 'C++ Classes and Objects',
                        description: 'Creating classes and objects in C++',
                        topics: [
                            'Class declaration syntax',
                            'Object definition and instantiation',
                            'Member functions',
                            'Access specifiers'
                        ]
                    },
                    {
                        id: 3,
                        title: 'Encapsulation in C++',
                        description: 'Data hiding mechanisms in C++',
                        topics: [
                            'Private member variables',
                            'Public interface design',
                            'Protected members',
                            'Friend functions and classes'
                        ]
                    },
                    {
                        id: 4,
                        title: 'Inheritance in C++',
                        description: 'Inheritance types and implementation',
                        topics: [
                            'Single inheritance',
                            'Multiple inheritance',
                            'Multilevel inheritance',
                            'Hierarchical inheritance'
                        ]
                    },
                    {
                        id: 5,
                        title: 'Polymorphism in C++',
                        description: 'Compile-time and runtime polymorphism',
                        topics: [
                            'Function overloading',
                            'Operator overloading',
                            'Virtual functions',
                            'Pure virtual functions'
                        ]
                    },
                    {
                        id: 6,
                        title: 'Abstraction in C++',
                        description: 'Abstract classes and interfaces',
                        topics: [
                            'Abstract classes',
                            'Pure virtual functions',
                            'Interface implementation',
                            'Design strategies'
                        ]
                    }
                ]
            },
            javascript: {
                name: 'JavaScript',
                icon: '🌐',
                chapters: [
                    {
                        id: 1,
                        title: 'JavaScript OOP Overview',
                        description: 'Object-oriented programming in JavaScript',
                        topics: [
                            'JavaScript OOP paradigms',
                            'Prototypal inheritance',
                            'ES6 class syntax',
                            'OOP patterns in JavaScript'
                        ]
                    },
                    {
                        id: 2,
                        title: 'Objects and Prototypes',
                        description: 'JavaScript object model',
                        topics: [
                            'Object creation methods',
                            'Prototype chain',
                            'Constructor functions',
                            'Object.create() method'
                        ]
                    },
                    {
                        id: 3,
                        title: 'ES6 Classes',
                        description: 'Modern JavaScript OOP syntax',
                        topics: [
                            'Class declaration',
                            'Constructor methods',
                            'Instance and static methods',
                            'Class inheritance'
                        ]
                    },
                    {
                        id: 4,
                        title: 'Inheritance in JavaScript',
                        description: 'Prototypal and class inheritance',
                        topics: [
                            'Prototype-based inheritance',
                            'Class-based inheritance',
                            'Extends keyword',
                            'Super keyword usage'
                        ]
                    },
                    {
                        id: 5,
                        title: 'Polymorphism in JavaScript',
                        description: 'Dynamic behavior implementation',
                        topics: [
                            'Method overriding',
                            'Duck typing',
                            'Dynamic method dispatch',
                            'Function polymorphism'
                        ]
                    },
                    {
                        id: 6,
                        title: 'Encapsulation in JavaScript',
                        description: 'Data hiding in JavaScript',
                        topics: [
                            'Private class fields',
                            'Getter and setter methods',
                            'Closure-based encapsulation',
                            'Module pattern'
                        ]
                    }
                ]
            }
        };

        // DOM Elements
        const sections = {
            splash: document.getElementById('splash-screen'),
            tutorial: document.getElementById('tutorial-section'),
            profile: document.getElementById('profile-section'),
            languageSelection: document.getElementById('language-selection-section'),
            apiKey: document.getElementById('api-key-section'),
            loading: document.getElementById('loading-section'),
            dashboard: document.getElementById('dashboard-section'),
            chapters: document.getElementById('chapters-section'),
            flashcard: document.getElementById('flashcard-section'),
            quiz: document.getElementById('quiz-section'),
            profileView: document.getElementById('profile-view-section')
        };

        const elements = {
            // Splash Screen
            continueToApp: document.getElementById('continue-to-app'),
            
            // Tutorial
            gotItBtn: document.getElementById('got-it-btn'),
            showTutorialBtn: document.getElementById('show-tutorial-btn'),
            
            // Profile Creation
            userName: document.getElementById('user-name'),
            learningGoal: document.getElementById('learning-goal'),
            sessionLength: document.getElementById('session-length'),
            createProfileBtn: document.getElementById('create-profile-btn'),
            profileStatus: document.getElementById('profile-status'),
            
            // Language Selection
            languageCards: document.querySelectorAll('.language-card'),
            continueToApi: document.getElementById('continue-to-api'),
            
            // API Key
            apiKeyInput: document.getElementById('api-key'),
            saveApiKeyBtn: document.getElementById('save-api-key'),
            apiStatus: document.getElementById('api-status'),
            
            // Dashboard
            userDisplayName: document.getElementById('user-display-name'),
            currentChapter: document.getElementById('current-chapter'),
            completedChapters: document.getElementById('completed-chapters'),
            totalFlashcards: document.getElementById('total-flashcards'),
            masteredConcepts: document.getElementById('mastered-concepts'),
            avgTime: document.getElementById('avg-time'),
            bestTime: document.getElementById('best-time'),
            retentionRate: document.getElementById('retention-rate'),
            learningVelocity: document.getElementById('learning-velocity'),
            aiRecommendations: document.getElementById('ai-recommendations'),
            continueLearningBtn: document.getElementById('continue-learning-btn'),
            viewChaptersBtn: document.getElementById('view-chapters-btn'),
            
            // Chapters
            chapterGrid: document.getElementById('chapter-grid'),
            backToDashboardBtn: document.getElementById('back-to-dashboard-btn'),
            
            // Flashcards
            flashcard: document.getElementById('flashcard'),
            flashcardTitle: document.getElementById('flashcard-title'),
            flashcardFrontContent: document.getElementById('flashcard-front-content'),
            flashcardBackContent: document.getElementById('flashcard-back-content'),
            prevFlashcardBtn: document.getElementById('prev-flashcard-btn'),
            flipFlashcardBtn: document.getElementById('flip-flashcard-btn'),
            nextFlashcardBtn: document.getElementById('next-flashcard-btn'),
            markEasyBtn: document.getElementById('mark-easy-btn'),
            markMediumBtn: document.getElementById('mark-medium-btn'),
            markHardBtn: document.getElementById('mark-hard-btn'),
            completeChapterBtn: document.getElementById('complete-chapter-btn'),
            
            // Quiz
            quizContainer: document.getElementById('quiz-container'),
            quizScore: document.getElementById('quiz-score'),
            scoreValue: document.getElementById('score-value'),
            submitQuizBtn: document.getElementById('submit-quiz-btn'),
            nextChapterBtn: document.getElementById('next-chapter-btn'),
            backToChaptersBtn: document.getElementById('back-to-chapters-btn'),
            
            // Profile View
            profileName: document.getElementById('profile-name'),
            profileKey: document.getElementById('profile-key'),
            profileCreated: document.getElementById('profile-created'),
            profileLanguage: document.getElementById('profile-language'),
            totalStudyTime: document.getElementById('total-study-time'),
            sessionsCompleted: document.getElementById('sessions-completed'),
            avgQuizScore: document.getElementById('avg-quiz-score'),
            currentStreak: document.getElementById('current-streak'),
            exportDataBtn: document.getElementById('export-data-btn'),
            resetProgressBtn: document.getElementById('reset-progress-btn'),
            backToDashboardFromProfileBtn: document.getElementById('back-to-dashboard-from-profile-btn'),
            
            // UI Elements
            profileToggle: document.getElementById('profile-toggle'),
            notification: document.getElementById('notification')
        };

        // Gemini API Configuration
        const GEMINI_API_ENDPOINT = 'https://generativelanguage.googleapis.com/v1beta/models/gemini-2.5-pro:generateContent';

        // Initialize Three.js Background
        function initThreeBackground() {
            const container = document.getElementById('three-background');
            
            // Scene
            const scene = new THREE.Scene();
            
            // Camera
            const camera = new THREE.PerspectiveCamera(75, window.innerWidth / window.innerHeight, 0.1, 1000);
            camera.position.z = 5;
            
            // Renderer
            const renderer = new THREE.WebGLRenderer({ alpha: true });
            renderer.setSize(window.innerWidth, window.innerHeight);
            renderer.setClearColor(0x000000, 0);
            container.appendChild(renderer.domElement);
            
            // Create floating particles
            const particlesGeometry = new THREE.BufferGeometry();
            const particlesCount = 500;
            const posArray = new Float32Array(particlesCount * 3);
            
            for(let i = 0; i < particlesCount * 3; i++) {
                posArray[i] = (Math.random() - 0.5) * 10;
            }
            
            particlesGeometry.setAttribute('position', new THREE.BufferAttribute(posArray, 3));
            
            // Material
            const particlesMaterial = new THREE.PointsMaterial({
                size: 0.02,
                color: 0x4a9eff,
                transparent: true,
                opacity: 0.8
            });
            
            // Mesh
            const particlesMesh = new THREE.Points(particlesGeometry, particlesMaterial);
            scene.add(particlesMesh);
            
            // Add ambient light
            const ambientLight = new THREE.AmbientLight(0xffffff, 0.5);
            scene.add(ambientLight);
            
            // Animation
            function animate() {
                requestAnimationFrame(animate);
                
                particlesMesh.rotation.x += 0.001;
                particlesMesh.rotation.y += 0.002;
                
                renderer.render(scene, camera);
            }
            
            animate();
            
            // Handle window resize
            window.addEventListener('resize', () => {
                camera.aspect = window.innerWidth / window.innerHeight;
                camera.updateProjectionMatrix();
                renderer.setSize(window.innerWidth, window.innerHeight);
            });
        }

        // Initialize Application
        function initApp() {
            // Show splash screen first
            elements.continueToApp.addEventListener('click', () => {
                sections.splash.style.opacity = '0';
                setTimeout(() => {
                    sections.splash.style.display = 'none';
                    // Initialize Three.js background after splash screen
                    initThreeBackground();
                    
                    // Check if user has seen tutorial
                    const hasSeenTutorial = localStorage.getItem('hasSeenTutorial');
                    if (hasSeenTutorial) {
                        // Check for existing profile
                        const savedProfile = localStorage.getItem('userProfile');
                        if (savedProfile) {
                            loadUserProfile();
                            showSection('dashboard');
                        } else {
                            showSection('profile');
                        }
                    } else {
                        // First time user, show tutorial
                        showSection('tutorial');
                    }
                }, 1000);
            });

            // Event Listeners
            elements.gotItBtn.addEventListener('click', () => {
                localStorage.setItem('hasSeenTutorial', 'true');
                showSection('profile');
            });

            elements.showTutorialBtn.addEventListener('click', () => {
                showSection('tutorial');
            });
            
            // Profile Creation
            elements.createProfileBtn.addEventListener('click', createProfile);
            
            // Language Selection
            elements.languageCards.forEach(card => {
                card.addEventListener('click', () => {
                    // Remove selected class from all cards
                    elements.languageCards.forEach(c => c.classList.remove('selected'));
                    // Add selected class to clicked card
                    card.classList.add('selected');
                    // Update selected language
                    appState.selectedLanguage = card.dataset.language;
                });
            });
            
            elements.continueToApi.addEventListener('click', () => {
                showSection('apiKey');
            });
            
            // API Key Management
            elements.saveApiKeyBtn.addEventListener('click', saveApiKey);
            
            // Dashboard Navigation
            elements.continueLearningBtn.addEventListener('click', () => {
                startLearningSession();
            });
            
            elements.viewChaptersBtn.addEventListener('click', () => {
                showSection('chapters');
                renderChapters();
            });
            
            // Chapters Navigation
            elements.backToDashboardBtn.addEventListener('click', () => {
                showSection('dashboard');
            });
            
            // Flashcard Controls
            elements.prevFlashcardBtn.addEventListener('click', previousFlashcard);
            elements.flipFlashcardBtn.addEventListener('click', flipFlashcard);
            elements.nextFlashcardBtn.addEventListener('click', nextFlashcard);
            
            elements.markEasyBtn.addEventListener('click', () => markDifficulty('easy'));
            elements.markMediumBtn.addEventListener('click', () => markDifficulty('medium'));
            elements.markHardBtn.addEventListener('click', () => markDifficulty('hard'));
            
            elements.completeChapterBtn.addEventListener('click', completeChapter);
            
            // Quiz Controls
            elements.submitQuizBtn.addEventListener('click', submitQuiz);
            elements.nextChapterBtn.addEventListener('click', nextChapter);
            elements.backToChaptersBtn.addEventListener('click', () => {
                showSection('chapters');
            });
            
            // Profile View Controls
            elements.profileToggle.addEventListener('click', () => {
                showSection('profileView');
                updateProfileView();
            });
            
            elements.backToDashboardFromProfileBtn.addEventListener('click', () => {
                showSection('dashboard');
            });
            
            elements.exportDataBtn.addEventListener('click', exportLearningData);
            elements.resetProgressBtn.addEventListener('click', resetProgress);
            
            // Flashcard flip event
            elements.flashcard.addEventListener('click', flipFlashcard);
        }

        // Section Navigation
        function showSection(sectionName) {
            Object.values(sections).forEach(section => {
                section.classList.remove('active');
            });
            sections[sectionName].classList.add('active');
            appState.currentSection = sectionName;
        }

        // Profile Creation
        function createProfile() {
            const userName = elements.userName.value.trim();
            if (!userName) {
                showNotification('Please enter your full name', 'error');
                return;
            }

            const today = new Date();
            const dateString = today.toISOString().split('T')[0];
            const userKey = `${userName}-${dateString}-12`;
            
            appState.userName = userName;
            appState.userKey = userKey;
            appState.createdDate = dateString;
            appState.learningGoal = elements.learningGoal.value;
            appState.sessionLength = parseInt(elements.sessionLength.value);
            
            // Save to localStorage
            const userProfile = {
                userName: appState.userName,
                userKey: appState.userKey,
                createdDate: appState.createdDate,
                learningGoal: appState.learningGoal,
                sessionLength: appState.sessionLength,
                selectedLanguage: appState.selectedLanguage,
                currentChapter: appState.currentChapter,
                completedChapters: appState.completedChapters,
                flashcardData: appState.flashcardData,
                quizScores: appState.quizScores,
                timeSpent: appState.timeSpent,
                learningPatterns: appState.learningPatterns,
                aiRecommendations: appState.aiRecommendations
            };
            
            localStorage.setItem('userProfile', JSON.stringify(userProfile));
            
            elements.profileStatus.textContent = 'Profile created successfully';
            elements.profileStatus.style.color = '#10b981';
            
            // Show loading screen then proceed to language selection
            showSection('loading');
            setTimeout(() => {
                showSection('languageSelection');
            }, 2000);
        }

        // Load User Profile
        function loadUserProfile() {
            const savedProfile = localStorage.getItem('userProfile');
            if (savedProfile) {
                const profile = JSON.parse(savedProfile);
                appState.userName = profile.userName;
                appState.userKey = profile.userKey;
                appState.createdDate = profile.createdDate;
                appState.learningGoal = profile.learningGoal;
                appState.sessionLength = profile.sessionLength;
                appState.selectedLanguage = profile.selectedLanguage || 'java';
                appState.currentChapter = profile.currentChapter || 1;
                appState.completedChapters = profile.completedChapters || [];
                appState.flashcardData = profile.flashcardData || {};
                appState.quizScores = profile.quizScores || {};
                appState.timeSpent = profile.timeSpent || {};
                appState.learningPatterns = profile.learningPatterns || {
                    averageTimePerFlashcard: 0,
                    peakPerformanceTime: '',
                    difficultConcepts: [],
                    preferredLearningStyle: '',
                    retentionRate: 0,
                    commonMistakes: []
                };
                appState.aiRecommendations = profile.aiRecommendations || {
                    nextFocusAreas: [],
                    suggestedReviewTopics: [],
                    adaptedContent: false,
                    personalizedHints: false,
                    difficultyAdjustment: 0
                };
                
                // Load API key if available
                const savedApiKey = localStorage.getItem('geminiApiKey');
                if (savedApiKey) {
                    appState.apiKey = savedApiKey;
                }
                
                return true;
            }
            return false;
        }

        // Update Profile View
        function updateProfileView() {
            elements.profileName.textContent = appState.userName;
            elements.profileKey.textContent = appState.userKey;
            elements.profileCreated.textContent = appState.createdDate;
            elements.profileLanguage.textContent = languageContent[appState.selectedLanguage].name;
            
            // Calculate statistics
            const totalStudyTime = Object.values(appState.timeSpent).reduce((sum, time) => sum + time, 0);
            elements.totalStudyTime.textContent = `${totalStudyTime} minutes`;
            
            const sessionsCompleted = Object.keys(appState.timeSpent).length;
            elements.sessionsCompleted.textContent = sessionsCompleted;
            
            const quizScores = Object.values(appState.quizScores);
            const avgScore = quizScores.length > 0 ? 
                Math.round(quizScores.reduce((sum, score) => sum + score, 0) / quizScores.length) : 0;
            elements.avgQuizScore.textContent = `${avgScore}%`;
            
            // Calculate current streak (simplified)
            const today = new Date().toISOString().split('T')[0];
            const lastStudyDate = Object.keys(appState.timeSpent).sort().pop() || '';
            const currentStreak = lastStudyDate === today ? 1 : 0;
            elements.currentStreak.textContent = `${currentStreak} days`;
        }

        // API Key Management
        function saveApiKey() {
            const apiKey = elements.apiKeyInput.value.trim();
            if (!apiKey) {
                showNotification('Please enter a valid API key', 'error');
                return;
            }

            // Simple validation - check if it looks like a Gemini API key
            if (!apiKey.startsWith('AIza') || apiKey.length < 20) {
                showNotification('Invalid API key format', 'error');
                return;
            }

            appState.apiKey = apiKey;
            localStorage.setItem('geminiApiKey', apiKey);
            elements.apiStatus.textContent = 'API key saved successfully';
            elements.apiStatus.style.color = '#10b981';
            
            // Show loading screen then proceed to dashboard
            showSection('loading');
            setTimeout(() => {
                showSection('dashboard');
                updateDashboard();
            }, 3000);
        }

        // Update Dashboard
        function updateDashboard() {
            elements.userDisplayName.textContent = appState.userName;
            
            const currentChapterData = languageContent[appState.selectedLanguage].chapters.find(
                ch => ch.id === appState.currentChapter
            );
            elements.currentChapter.textContent = currentChapterData ? currentChapterData.title : 'Not started';
            
            elements.completedChapters.textContent = appState.completedChapters.length;
            
            // Calculate total flashcards (simplified)
            const totalFlashcards = Object.keys(appState.flashcardData).length;
            elements.totalFlashcards.textContent = totalFlashcards;
            
            // Calculate mastered concepts (simplified)
            const masteredConcepts = Object.values(appState.flashcardData).filter(
                card => card.correctAnswers >= 3
            ).length;
            elements.masteredConcepts.textContent = masteredConcepts;
            
            // Update learning patterns
            const avgTime = appState.learningPatterns.averageTimePerFlashcard;
            elements.avgTime.textContent = avgTime ? `${avgTime.toFixed(1)}s` : '-';
            
            elements.bestTime.textContent = appState.learningPatterns.peakPerformanceTime || '-';
            elements.retentionRate.textContent = appState.learningPatterns.retentionRate ? 
                `${(appState.learningPatterns.retentionRate * 100).toFixed(0)}%` : '-';
            
            const velocity = appState.learningPatterns.learningVelocity;
            elements.learningVelocity.textContent = velocity ? `${velocity.toFixed(1)}` : '-';
            
            // Update AI recommendations
            updateAIRecommendations();
        }

        // Update AI Recommendations
        function updateAIRecommendations() {
            if (!appState.apiKey) {
                elements.aiRecommendations.innerHTML = '<p>API key required for personalized recommendations</p>';
                return;
            }
            
            // Generate recommendations based on learning patterns
            const recommendations = [];
            
            if (appState.learningPatterns.difficultConcepts.length > 0) {
                recommendations.push(`<p><strong>Focus Areas:</strong> ${appState.learningPatterns.difficultConcepts.join(', ')}</p>`);
            }
            
            if (appState.aiRecommendations.suggestedReviewTopics.length > 0) {
                recommendations.push(`<p><strong>Review Topics:</strong> ${appState.aiRecommendations.suggestedReviewTopics.join(', ')}</p>`);
            }
            
            if (appState.learningPatterns.commonMistakes.length > 0) {
                recommendations.push(`<p><strong>Common Mistakes:</strong> ${appState.learningPatterns.commonMistakes.join(', ')}</p>`);
            }
            
            if (recommendations.length === 0) {
                recommendations.push('<p>Complete more flashcards to get personalized recommendations</p>');
            }
            
            elements.aiRecommendations.innerHTML = recommendations.join('');
        }

        // Render Chapters
        function renderChapters() {
            const chapters = languageContent[appState.selectedLanguage].chapters;
            
            elements.chapterGrid.innerHTML = chapters.map(chapter => {
                const isCompleted = appState.completedChapters.includes(chapter.id);
                const isCurrent = chapter.id === appState.currentChapter;
                
                let progress = 0;
                if (isCompleted) {
                    progress = 100;
                } else if (isCurrent) {
                    // Calculate progress for current chapter (simplified)
                    const chapterFlashcards = Object.keys(appState.flashcardData).filter(
                        key => key.startsWith(`ch${chapter.id}_`)
                    );
                    progress = chapterFlashcards.length > 0 ? 
                        Math.min(100, (chapterFlashcards.length / 10) * 100) : 0;
                }
                
                return `
                    <div class="chapter-card ${isCompleted ? 'completed' : ''} ${isCurrent ? 'current' : ''}" 
                         data-chapter-id="${chapter.id}">
                        <div class="chapter-title">${chapter.title}</div>
                        <div class="chapter-description">${chapter.description}</div>
                        <div class="chapter-progress">
                            <div class="chapter-progress-fill" style="width: ${progress}%"></div>
                        </div>
                        <div class="chapter-stats">
                            <span>${isCompleted ? 'Completed' : isCurrent ? 'In Progress' : 'Not Started'}</span>
                            <span>${progress.toFixed(0)}%</span>
                        </div>
                    </div>
                `;
            }).join('');
            
            // Add event listeners to chapter cards
            const chapterCards = document.querySelectorAll('.chapter-card');
            chapterCards.forEach(card => {
                card.addEventListener('click', () => {
                    const chapterId = parseInt(card.dataset.chapterId);
                    startChapter(chapterId);
                });
            });
        }

        // Start Learning Session
        function startLearningSession() {
            appState.sessionStartTime = new Date();
            startChapter(appState.currentChapter);
        }

        // Start Chapter
        function startChapter(chapterId) {
            appState.currentChapter = chapterId;
            
            // Check if chapter is completed
            if (appState.completedChapters.includes(chapterId)) {
                showNotification('This chapter is already completed. Starting review mode.');
            }
            
            // Generate flashcards for the chapter
            generateChapterFlashcards(chapterId);
        }

        // Generate Chapter Flashcards
        async function generateChapterFlashcards(chapterId) {
            showSection('loading');
            
            const chapterData = languageContent[appState.selectedLanguage].chapters.find(
                ch => ch.id === chapterId
            );
            
            if (!chapterData) {
                showNotification('Chapter not found', 'error');
                showSection('chapters');
                return;
            }
            
            try {
                // Check if we have existing flashcards for this chapter
                const existingFlashcards = Object.keys(appState.flashcardData).filter(
                    key => key.startsWith(`ch${chapterId}_`)
                );
                
                if (existingFlashcards.length > 0) {
                    // Load existing flashcards
                    appState.currentFlashcards = existingFlashcards.map(key => {
                        return {
                            id: key,
                            ...appState.flashcardData[key]
                        };
                    });
                    
                    appState.currentFlashcardIndex = 0;
                    showSection('flashcard');
                    renderCurrentFlashcard();
                    return;
                }
                
                // Generate new flashcards using AI
                if (!appState.apiKey) {
                    showNotification('API key required for generating flashcards', 'error');
                    showSection('apiKey');
                    return;
                }
                
                const prompt = `Generate 10 flashcards for learning about "${chapterData.title}" in ${languageContent[appState.selectedLanguage].name}.
                
The chapter covers these topics:
 ${chapterData.topics.map(topic => `- ${topic}`).join('\n')}

IMPORTANT: Explain everything as if you're teaching a 10-year-old child. Use simple language, fun analogies, and examples that a child can understand and relate to.

For each flashcard, provide:
1. A clear question or concept on the front (simple language for kids)
2. A detailed answer or explanation on the back (explain like to a 10-year-old)
3. A simple code example if applicable (with comments explaining each part)
4. Difficulty level (easy, medium, or hard)

Return the response in valid JSON format exactly as shown below:
{
  "flashcards": [
    {
      "front": "Question or concept here (simple for kids)",
      "back": "Answer or explanation here (explain like to a 10-year-old)",
      "code": "Simple code example with comments (or empty string)",
      "difficulty": "easy|medium|hard"
    }
  ]
}

Do not include any text before or after the JSON. The response must be pure JSON that can be parsed by JSON.parse().`;
                
                const response = await callGeminiAPI(prompt);
                
                // Try to parse the JSON response
                let data;
                try {
                    // Clean the response
                    let cleanResponse = response.trim();
                    if (cleanResponse.startsWith('```json')) {
                        cleanResponse = cleanResponse.replace(/```json\n?/, '').replace(/\n?```$/, '');
                    } else if (cleanResponse.startsWith('```')) {
                        cleanResponse = cleanResponse.replace(/```\n?/, '').replace(/\n?```$/, '');
                    }
                    
                    // Try to find JSON object in the response
                    const jsonMatch = cleanResponse.match(/\{[\s\S]*\}/);
                    if (jsonMatch) {
                        cleanResponse = jsonMatch[0];
                    }
                    
                    data = JSON.parse(cleanResponse);
                    
                    if (!data.flashcards || !Array.isArray(data.flashcards)) {
                        throw new Error('Invalid JSON structure');
                    }
                    
                    // Validate each flashcard
                    data.flashcards = data.flashcards.filter(card => 
                        card.front && card.back && ['easy', 'medium', 'hard'].includes(card.difficulty)
                    );
                    
                    if (data.flashcards.length === 0) {
                        throw new Error('No valid flashcards found');
                    }
                } catch (parseError) {
                    console.error('Failed to parse AI response:', parseError);
                    showNotification('Error generating flashcards. Using fallback content.', 'error');
                    
                    // Use fallback flashcards
                    data = generateFallbackFlashcards(chapterData);
                }
                
                // Store flashcards in app state
                appState.currentFlashcards = data.flashcards.map((card, index) => {
                    const flashcardId = `ch${chapterId}_${index + 1}`;
                    const flashcardData = {
                        id: flashcardId,
                        front: card.front,
                        back: card.back,
                        code: card.code || '',
                        difficulty: card.difficulty,
                        firstViewTime: 0,
                        lastViewTime: 0,
                        viewCount: 0,
                        correctAnswers: 0,
                        userRating: card.difficulty
                    };
                    
                    // Store in flashcard data
                    appState.flashcardData[flashcardId] = flashcardData;
                    
                    return flashcardData;
                });
                
                appState.currentFlashcardIndex = 0;
                
                // Save to localStorage
                saveUserProfile();
                
                showSection('flashcard');
                renderCurrentFlashcard();
            } catch (error) {
                showNotification(`Error generating flashcards: ${error.message}`, 'error');
                showSection('chapters');
            }
        }

        // Generate Fallback Flashcards
        function generateFallbackFlashcards(chapterData) {
            const fallbackFlashcards = [];
            
            // Generate basic flashcards based on chapter topics
            chapterData.topics.forEach((topic, index) => {
                if (index < 10) { // Limit to 10 flashcards
                    fallbackFlashcards.push({
                        front: `What is ${topic}?`,
                        back: `${topic} is a fundamental concept in ${languageContent[appState.selectedLanguage].name} that helps build amazing programs. Think of it like a building block for coding!`,
                        code: '',
                        difficulty: 'medium'
                    });
                }
            });
            
            // Ensure we have at least 10 flashcards
            while (fallbackFlashcards.length < 10) {
                fallbackFlashcards.push({
                    front: `What are the key concepts in ${chapterData.title}?`,
                    back: `The key concepts in ${chapterData.title} are special tools that help you create awesome programs. Each one helps you organize your code better!`,
                    code: '',
                    difficulty: 'medium'
                });
            }
            
            return { flashcards: fallbackFlashcards };
        }

        // Render Current Flashcard
        function renderCurrentFlashcard() {
            if (appState.currentFlashcards.length === 0) {
                showNotification('No flashcards available for this chapter', 'error');
                showSection('chapters');
                return;
            }
            
            const flashcard = appState.currentFlashcards[appState.currentFlashcardIndex];
            
            elements.flashcardTitle.textContent = `Flashcard ${appState.currentFlashcardIndex + 1} of ${appState.currentFlashcards.length}`;
            elements.flashcardFrontContent.innerHTML = `
                <div>${flashcard.front}</div>
                ${flashcard.code ? `<div class="flashcard-code">${flashcard.code}</div>` : ''}
            `;
            elements.flashcardBackContent.innerHTML = `
                <div>${flashcard.back}</div>
                ${flashcard.code ? `<div class="flashcard-code">${flashcard.code}</div>` : ''}
            `;
            
            // Reset flip state
            elements.flashcard.classList.remove('flipped');
            
            // Update difficulty indicator
            updateDifficultyIndicator(flashcard.userRating);
            
            // Update button states
            elements.prevFlashcardBtn.disabled = appState.currentFlashcardIndex === 0;
            elements.nextFlashcardBtn.disabled = appState.currentFlashcardIndex === appState.currentFlashcards.length - 1;
            
            // Record view time
            const viewStartTime = new Date();
            
            // Update flashcard data when navigating away
            const updateViewData = () => {
                const viewEndTime = new Date();
                const viewTime = (viewEndTime - viewStartTime) / 1000; // in seconds
                
                if (!flashcard.firstViewTime) {
                    flashcard.firstViewTime = viewTime;
                }
                flashcard.lastViewTime = viewTime;
                flashcard.viewCount++;
                
                // Save to app state
                appState.flashcardData[flashcard.id] = flashcard;
                
                // Update learning patterns
                updateLearningPatterns();
            };
            
            // Store update function for later use
            elements.flashcard.updateViewData = updateViewData;
        }

        // Update Difficulty Indicator
        function updateDifficultyIndicator(difficulty) {
            const dots = document.querySelectorAll('.difficulty-dot');
            dots.forEach(dot => dot.style.opacity = '0.3');
            
            if (difficulty === 'easy') {
                dots[0].style.opacity = '1';
            } else if (difficulty === 'medium') {
                dots[1].style.opacity = '1';
            } else if (difficulty === 'hard') {
                dots[2].style.opacity = '1';
            }
        }

        // Flashcard Navigation
        function previousFlashcard() {
            if (elements.flashcard.updateViewData) {
                elements.flashcard.updateViewData();
            }
            
            if (appState.currentFlashcardIndex > 0) {
                appState.currentFlashcardIndex--;
                renderCurrentFlashcard();
            }
        }

        function nextFlashcard() {
            if (elements.flashcard.updateViewData) {
                elements.flashcard.updateViewData();
            }
            
            if (appState.currentFlashcardIndex < appState.currentFlashcards.length - 1) {
                appState.currentFlashcardIndex++;
                renderCurrentFlashcard();
            }
        }

        function flipFlashcard() {
            elements.flashcard.classList.toggle('flipped');
        }

        // Mark Difficulty
        function markDifficulty(difficulty) {
            const flashcard = appState.currentFlashcards[appState.currentFlashcardIndex];
            flashcard.userRating = difficulty;
            
            // Update in app state
            appState.flashcardData[flashcard.id] = flashcard;
            
            // Update difficulty indicator
            updateDifficultyIndicator(difficulty);
            
            // Save to localStorage
            saveUserProfile();
            
            showNotification(`Marked as ${difficulty}`);
        }

        // Complete Chapter
        function completeChapter() {
            if (elements.flashcard.updateViewData) {
                elements.flashcard.updateViewData();
            }
            
            // Generate quiz for the chapter
            generateChapterQuiz();
        }

        // Generate Chapter Quiz
        async function generateChapterQuiz() {
            showSection('loading');
            
            const chapterData = languageContent[appState.selectedLanguage].chapters.find(
                ch => ch.id === appState.currentChapter
            );
            
            if (!chapterData) {
                showNotification('Chapter not found', 'error');
                showSection('flashcard');
                return;
            }
            
            try {
                if (!appState.apiKey) {
                    showNotification('API key required for generating quiz', 'error');
                    showSection('apiKey');
                    return;
                }
                
                const prompt = `Generate a 5-question quiz for a 10-year-old learning about "${chapterData.title}" in ${languageContent[appState.selectedLanguage].name}.
                
The chapter covers these topics:
 ${chapterData.topics.map(topic => `- ${topic}`).join('\n')}

IMPORTANT: Make this quiz engaging and appropriate for a 10-year-old. Use simple language and relatable examples.

For each question, provide:
1. A clear question text (simple for kids)
2. 4 multiple choice options (A, B, C, D) - make them engaging
3. The correct answer (A, B, C, or D)
4. A brief explanation of why the answer is correct (explain like to a 10-year-old)

Focus on testing understanding of key concepts in a fun way. Include a mix of conceptual questions and practical examples kids can relate to.

Return the response in valid JSON format exactly as shown below:
{
  "questions": [
    {
      "question": "Question text here (simple for kids)",
      "options": ["Option A", "Option B", "Option C", "Option D"],
      "correct": "A",
      "explanation": "Explanation here (explain like to a 10-year-old)"
    }
  ]
}

Do not include any text before or after the JSON. The response must be pure JSON that can be parsed by JSON.parse().`;
                
                const response = await callGeminiAPI(prompt);
                
                // Try to parse the JSON response
                let data;
                try {
                    // Clean the response
                    let cleanResponse = response.trim();
                    if (cleanResponse.startsWith('```json')) {
                        cleanResponse = cleanResponse.replace(/```json\n?/, '').replace(/\n?```$/, '');
                    } else if (cleanResponse.startsWith('```')) {
                        cleanResponse = cleanResponse.replace(/```\n?/, '').replace(/\n?```$/, '');
                    }
                    
                    // Try to find JSON object in the response
                    const jsonMatch = cleanResponse.match(/\{[\s\S]*\}/);
                    if (jsonMatch) {
                        cleanResponse = jsonMatch[0];
                    }
                    
                    data = JSON.parse(cleanResponse);
                    
                    if (!data.questions || !Array.isArray(data.questions)) {
                        throw new Error('Invalid JSON structure');
                    }
                    
                    // Validate each question
                    data.questions = data.questions.filter(q => 
                        q.question && q.options && q.options.length === 4 && 
                        ['A', 'B', 'C', 'D'].includes(q.correct) && q.explanation
                    );
                    
                    if (data.questions.length === 0) {
                        throw new Error('No valid questions found');
                    }
                } catch (parseError) {
                    console.error('Failed to parse AI response:', parseError);
                    showNotification('Error generating quiz. Using fallback content.', 'error');
                    
                    // Use fallback quiz
                    data = generateFallbackQuiz(chapterData);
                }
                
                // Store quiz in app state
                appState.currentQuiz = data.questions;
                appState.currentQuizAnswers = new Array(data.questions.length).fill(null);
                
                showSection('quiz');
                renderCurrentQuizQuestion();
            } catch (error) {
                showNotification(`Error generating quiz: ${error.message}`, 'error');
                showSection('flashcard');
            }
        }

        // Generate Fallback Quiz
        function generateFallbackQuiz(chapterData) {
            const fallbackQuestions = [];
            
            // Generate basic questions based on chapter topics
            for (let i = 0; i < 5; i++) {
                const topic = chapterData.topics[i % chapterData.topics.length];
                fallbackQuestions.push({
                    question: `What is ${topic} like in programming?`,
                    options: [
                        "Like building with blocks",
                        "Like playing video games",
                        "Like eating pizza",
                        "Like riding a bike"
                    ],
                    correct: "A",
                    explanation: `${topic} is like building with blocks - you use different pieces to create something amazing!`
                });
            }
            
            return { questions: fallbackQuestions };
        }

        // Render Current Quiz Question
        function renderCurrentQuizQuestion() {
            if (appState.currentQuiz.length === 0) {
                showNotification('No quiz questions available', 'error');
                showSection('flashcard');
                return;
            }
            
            const currentQuestionIndex = appState.currentQuizAnswers.findIndex(
                answer => answer === null
            );
            
            if (currentQuestionIndex === -1) {
                // All questions answered
                showQuizResults();
                return;
            }
            
            const question = appState.currentQuiz[currentQuestionIndex];
            
            elements.quizContainer.innerHTML = `
                <div class="quiz-container">
                    <div class="quiz-question">Question ${currentQuestionIndex + 1} of ${appState.currentQuiz.length}: ${question.question}</div>
                    <div class="quiz-options">
                        ${question.options.map((option, index) => {
                            const letter = String.fromCharCode(65 + index); // A, B, C, D
                            const isSelected = appState.currentQuizAnswers[currentQuestionIndex] === letter;
                            return `
                                <div class="quiz-option ${isSelected ? 'selected' : ''}" data-answer="${letter}">
                                    ${letter}. ${option}
                                </div>
                            `;
                        }).join('')}
                    </div>
                </div>
            `;
            
            // Add event listeners to options
            const quizOptions = document.querySelectorAll('.quiz-option');
            quizOptions.forEach(option => {
                option.addEventListener('click', () => {
                    // Remove selected class from all options
                    quizOptions.forEach(opt => opt.classList.remove('selected'));
                    // Add selected class to clicked option
                    option.classList.add('selected');
                    // Store the answer
                    const answer = option.dataset.answer;
                    appState.currentQuizAnswers[currentQuestionIndex] = answer;
                });
            });
            
            // Show submit button if all questions are answered
            const allAnswered = appState.currentQuizAnswers.every(answer => answer !== null);
            elements.submitQuizBtn.style.display = allAnswered ? 'inline-block' : 'none';
        }

        // Submit Quiz
        function submitQuiz() {
            // Calculate score
            let correctCount = 0;
            const questionResults = [];
            
            appState.currentQuiz.forEach((question, index) => {
                const userAnswer = appState.currentQuizAnswers[index];
                const isCorrect = userAnswer === question.correct;
                
                if (isCorrect) {
                    correctCount++;
                }
                
                questionResults.push({
                    question: question.question,
                    userAnswer: userAnswer,
                    correctAnswer: question.correct,
                    isCorrect: isCorrect,
                    explanation: question.explanation
                });
            });
            
            const score = Math.round((correctCount / appState.currentQuiz.length) * 100);
            
            // Store quiz score
            appState.quizScores[`ch${appState.currentChapter}`] = score;
            
            // Save to localStorage
            saveUserProfile();
            
            // Show results
            showQuizResults(questionResults, score);
        }

        // Show Quiz Results
        function showQuizResults(questionResults, score) {
            if (!questionResults) {
                // Calculate score if not provided
                let correctCount = 0;
                questionResults = [];
                
                appState.currentQuiz.forEach((question, index) => {
                    const userAnswer = appState.currentQuizAnswers[index];
                    const isCorrect = userAnswer === question.correct;
                    
                    if (isCorrect) {
                        correctCount++;
                    }
                    
                    questionResults.push({
                        question: question.question,
                        userAnswer: userAnswer,
                        correctAnswer: question.correct,
                        isCorrect: isCorrect,
                        explanation: question.explanation
                    });
                });
                
                score = Math.round((correctCount / appState.currentQuiz.length) * 100);
            }
            
            // Display results
            elements.quizContainer.innerHTML = questionResults.map((result, index) => `
                <div class="quiz-container">
                    <div class="quiz-question">Question ${index + 1}: ${result.question}</div>
                    <div class="quiz-options">
                        ${appState.currentQuiz[index].options.map((option, optionIndex) => {
                            const letter = String.fromCharCode(65 + optionIndex);
                            const isUserAnswer = letter === result.userAnswer;
                            const isCorrectAnswer = letter === result.correctAnswer;
                            
                            let className = 'quiz-option';
                            if (isCorrectAnswer) {
                                className += ' correct';
                            } else if (isUserAnswer) {
                                className += ' incorrect';
                            }
                            
                            return `
                                <div class="${className}">
                                    ${letter}. ${option}
                                </div>
                            `;
                        }).join('')}
                    </div>
                    ${!result.isCorrect ? `
                        <div class="quiz-feedback">
                            <strong>Explanation:</strong> ${result.explanation}
                        </div>
                    ` : ''}
                </div>
            `).join('');
            
            elements.quizScore.style.display = 'block';
            elements.scoreValue.textContent = score;
            
            // Show next chapter button if score is good enough
            if (score >= 70) {
                elements.nextChapterBtn.style.display = 'inline-block';
                
                // Mark chapter as completed
                if (!appState.completedChapters.includes(appState.currentChapter)) {
                    appState.completedChapters.push(appState.currentChapter);
                    saveUserProfile();
                }
            } else {
                elements.nextChapterBtn.style.display = 'none';
                showNotification('You need to score at least 70% to unlock the next chapter. Try again!', 'error');
            }
            
            elements.submitQuizBtn.style.display = 'none';
        }

        // Next Chapter
        function nextChapter() {
            const chapters = languageContent[appState.selectedLanguage].chapters;
            const currentChapterIndex = chapters.findIndex(ch => ch.id === appState.currentChapter);
            
            if (currentChapterIndex < chapters.length - 1) {
                appState.currentChapter = chapters[currentChapterIndex + 1].id;
                startChapter(appState.currentChapter);
            } else {
                showNotification('Congratulations! You have completed all chapters.', 'success');
                showSection('dashboard');
                updateDashboard();
            }
        }

        // Update Learning Patterns
        function updateLearningPatterns() {
            const flashcards = Object.values(appState.flashcardData);
            
            if (flashcards.length === 0) return;
            
            // Calculate average time per flashcard
            const totalTime = flashcards.reduce((sum, card) => sum + (card.lastViewTime || 0), 0);
            appState.learningPatterns.averageTimePerFlashcard = totalTime / flashcards.length;
            
            // Determine peak performance time (simplified)
            const hour = new Date().getHours();
            if (hour >= 9 && hour <= 11) {
                appState.learningPatterns.peakPerformanceTime = 'morning';
            } else if (hour >= 14 && hour <= 16) {
                appState.learningPatterns.peakPerformanceTime = 'afternoon';
            } else if (hour >= 19 && hour <= 21) {
                appState.learningPatterns.peakPerformanceTime = 'evening';
            } else {
                appState.learningPatterns.peakPerformanceTime = 'other';
            }
            
            // Identify difficult concepts (cards marked as hard)
            appState.learningPatterns.difficultConcepts = flashcards
                .filter(card => card.userRating === 'hard')
                .map(card => card.front.substring(0, 30) + '...');
            
            // Calculate retention rate (simplified)
            const viewedCards = flashcards.filter(card => card.viewCount > 1);
            if (viewedCards.length > 0) {
                const correctCards = viewedCards.filter(card => card.correctAnswers >= card.viewCount * 0.7);
                appState.learningPatterns.retentionRate = correctCards.length / viewedCards.length;
            }
            
            // Calculate learning velocity (simplified)
            const today = new Date().toISOString().split('T')[0];
            const todayCards = flashcards.filter(card => 
                card.lastViewTime && new Date(card.lastViewTime).toISOString().split('T')[0] === today
            );
            appState.learningPatterns.learningVelocity = todayCards.length;
            
            // Update AI recommendations based on patterns
            updateAIRecommendationsBasedOnPatterns();
        }

        // Update AI Recommendations Based on Patterns
        function updateAIRecommendationsBasedOnPatterns() {
            // Focus on difficult concepts
            appState.aiRecommendations.nextFocusAreas = appState.learningPatterns.difficultConcepts.slice(0, 3);
            
            // Suggest review topics based on retention rate
            const lowRetentionCards = Object.values(appState.flashcardData).filter(card => 
                card.viewCount > 1 && (card.correctAnswers / card.viewCount) < 0.7
            );
            appState.aiRecommendations.suggestedReviewTopics = lowRetentionCards
                .map(card => card.front.substring(0, 30) + '...')
                .slice(0, 3);
            
            // Mark content as adapted if we have enough data
            appState.aiRecommendations.adaptedContent = Object.keys(appState.flashcardData).length > 20;
            
            // Enable personalized hints if user has struggled with concepts
            appState.aiRecommendations.personalizedHints = appState.learningPatterns.difficultConcepts.length > 0;
            
            // Adjust difficulty based on performance
            const avgScore = Object.values(appState.quizScores).reduce((sum, score) => sum + score, 0) / 
                             Object.keys(appState.quizScores).length;
            
            if (avgScore < 60) {
                appState.aiRecommendations.difficultyAdjustment = -0.2; // Make easier
            } else if (avgScore > 85) {
                appState.aiRecommendations.difficultyAdjustment = 0.2; // Make harder
            } else {
                appState.aiRecommendations.difficultyAdjustment = 0; // Keep same
            }
        }

        // Gemini API Call Function
        async function callGeminiAPI(prompt) {
            try {
                const response = await fetch(GEMINI_API_ENDPOINT, {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                        'X-goog-api-key': appState.apiKey
                    },
                    body: JSON.stringify({
                        contents: [
                            {
                                parts: [
                                    {
                                        text: prompt
                                    }
                                ]
                            }
                        ]
                    })
                });

                if (!response.ok) {
                    const errorData = await response.json();
                    throw new Error(errorData.error?.message || 'API request failed');
                }

                const data = await response.json();
                return data.candidates[0].content.parts[0].text;
            } catch (error) {
                console.error('Gemini API Error:', error);
                throw error;
            }
        }

        // Save User Profile to LocalStorage
        function saveUserProfile() {
            const userProfile = {
                userName: appState.userName,
                userKey: appState.userKey,
                createdDate: appState.createdDate,
                learningGoal: appState.learningGoal,
                sessionLength: appState.sessionLength,
                selectedLanguage: appState.selectedLanguage,
                currentChapter: appState.currentChapter,
                completedChapters: appState.completedChapters,
                flashcardData: appState.flashcardData,
                quizScores: appState.quizScores,
                timeSpent: appState.timeSpent,
                learningPatterns: appState.learningPatterns,
                aiRecommendations: appState.aiRecommendations
            };
            
            localStorage.setItem('userProfile', JSON.stringify(userProfile));
        }

        // Export Learning Data
        function exportLearningData() {
            const userProfile = {
                userName: appState.userName,
                userKey: appState.userKey,
                createdDate: appState.createdDate,
                learningGoal: appState.learningGoal,
                selectedLanguage: appState.selectedLanguage,
                currentChapter: appState.currentChapter,
                completedChapters: appState.completedChapters,
                flashcardData: appState.flashcardData,
                quizScores: appState.quizScores,
                timeSpent: appState.timeSpent,
                learningPatterns: appState.learningPatterns,
                aiRecommendations: appState.aiRecommendations
            };
            
            const dataStr = JSON.stringify(userProfile, null, 2);
            const dataUri = 'data:application/json;charset=utf-8,'+ encodeURIComponent(dataStr);
            
            const exportFileDefaultName = `codeflash-ai-data-${appState.userName}-${new Date().toISOString().split('T')[0]}.json`;
            
            const linkElement = document.createElement('a');
            linkElement.setAttribute('href', dataUri);
            linkElement.setAttribute('download', exportFileDefaultName);
            linkElement.click();
            
            showNotification('Learning data exported successfully');
        }

        // Reset Progress
        function resetProgress() {
            if (confirm('Are you sure you want to reset all your progress? This action cannot be undone.')) {
                // Reset progress but keep profile info
                appState.currentChapter = 1;
                appState.completedChapters = [];
                appState.flashcardData = {};
                appState.quizScores = {};
                appState.timeSpent = {};
                appState.learningPatterns = {
                    averageTimePerFlashcard: 0,
                    peakPerformanceTime: '',
                    difficultConcepts: [],
                    preferredLearningStyle: '',
                    retentionRate: 0,
                    commonMistakes: []
                };
                appState.aiRecommendations = {
                    nextFocusAreas: [],
                    suggestedReviewTopics: [],
                    adaptedContent: false,
                    personalizedHints: false,
                    difficultyAdjustment: 0
                };
                
                // Save to localStorage
                saveUserProfile();
                
                showNotification('Progress reset successfully');
                showSection('dashboard');
                updateDashboard();
            }
        }

        // Utility Functions
        function showNotification(message, type = 'success') {
            elements.notification.textContent = message;
            elements.notification.className = `notification ${type}`;
            elements.notification.classList.add('show');
            
            setTimeout(() => {
                elements.notification.classList.remove('show');
            }, 3000);
        }

        // Initialize the application when DOM is loaded
        document.addEventListener('DOMContentLoaded', initApp);
    </script>
</body>
</html>