<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>HOPE-INT-CORE | AI-Powered Content Generator</title>
    <meta name="description" content="Create presentations, reports, assignments, and projects with AI">
    <link rel="icon" href="/favicon.ico">
    <script src="https://cdnjs.cloudflare.com/ajax/libs/three.js/r128/three.min.js"></script>
    <script src="https://unpkg.com/@lottiefiles/lottie-player@latest/dist/lottie-player.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/jszip/3.10.1/jszip.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/FileSaver.js/2.0.5/FileSaver.min.js"></script>
    <style>
        /* All existing styles remain unchanged */
        * { margin: 0; padding: 0; box-sizing: border-box; font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif; }
        body { background: linear-gradient(135deg, #000000, #1a1a2e); color: #ffffff; min-height: 100vh; display: flex; flex-direction: column; align-items: center; padding: 20px; position: relative; overflow-x: hidden; }
        #three-background { position: fixed; top: 0; left: 0; width: 100%; height: 100%; z-index: -1; }
        .container { width: 100%; max-width: 800px; margin: 0 auto; background: rgba(255, 255, 255, 0.05); backdrop-filter: blur(15px); border-radius: 20px; padding: 30px; box-shadow: 0 8px 32px rgba(0, 0, 0, 0.3); border: 1px solid rgba(255, 255, 255, 0.1); margin-bottom: 80px; }
        h1 { text-align: center; margin-bottom: 30px; font-size: 2.5rem; text-shadow: 0 2px 10px rgba(0, 0, 0, 0.5); background: linear-gradient(45deg, #3498db, #ffffff); -webkit-background-clip: text; -webkit-text-fill-color: transparent; background-clip: text; }
        .section { display: none; animation: fadeIn 0.5s ease-in-out; }
        .section.active { display: block; }
        @keyframes fadeIn { from { opacity: 0; transform: translateY(20px); } to { opacity: 1; transform: translateY(0); } }
        .form-group { margin-bottom: 20px; }
        label { display: block; margin-bottom: 8px; font-weight: 600; color: rgba(255, 255, 255, 0.9); }
        input, textarea, select { width: 100%; padding: 12px; border: none; border-radius: 12px; background: rgba(255, 255, 255, 0.1); color: #fff; font-size: 16px; backdrop-filter: blur(5px); border: 1px solid rgba(52, 152, 219, 0.3); transition: all 0.3s ease; }
        input:focus, textarea:focus, select:focus { outline: none; background: rgba(255, 255, 255, 0.15); box-shadow: 0 0 15px rgba(52, 152, 219, 0.4); border-color: rgba(52, 152, 219, 0.6); }
        input::placeholder, textarea::placeholder { color: rgba(255, 255, 255, 0.6); }
        select { -webkit-appearance: none; -moz-appearance: none; appearance: none; background-image: url("data:image/svg+xml;charset=UTF-8,%3csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 24 24' fill='none' stroke='white' stroke-width='2' stroke-linecap='round' stroke-linejoin='round'%3e%3cpolyline points='6 9 12 15 18 9'%3e%3c/polyline%3e%3c/svg%3e"); background-repeat: no-repeat; background-position: right 0.7rem center; background-size: 1.5em; padding-right: 2.5rem; }
        select option { background: #1a1a2e; color: #ffffff; }
        button { background: linear-gradient(45deg, #3498db, #2980b9); color: white; border: none; padding: 12px 24px; border-radius: 12px; cursor: pointer; font-size: 16px; font-weight: 600; transition: all 0.3s ease; margin-right: 10px; margin-top: 10px; backdrop-filter: blur(5px); border: 1px solid rgba(255, 255, 255, 0.1); box-shadow: 0 4px 15px rgba(52, 152, 219, 0.3); }
        button:hover { transform: translateY(-2px); box-shadow: 0 6px 20px rgba(52, 152, 219, 0.4); background: linear-gradient(45deg, #2980b9, #3498db); }
        button:disabled { opacity: 0.6; cursor: not-allowed; transform: none; }
        .loading-screen { display: flex; flex-direction: column; align-items: center; justify-content: center; height: 60vh; }
        .loading-text { font-size: 2rem; margin-bottom: 20px; animation: pulse 1.5s infinite; text-align: center; color: #3498db; }
        .loading-credit { font-size: 1.2rem; margin-top: 10px; opacity: 0; animation: fadeIn 1s forwards; animation-delay: 0.5s; color: rgba(255, 255, 255, 0.8); }
        .loading-credit:nth-child(3) { animation-delay: 1s; }
        @keyframes pulse { 0% { opacity: 0.6; } 50% { opacity: 1; } 100% { opacity: 0.6; } }
        .question-container { background: rgba(255, 255, 255, 0.08); backdrop-filter: blur(10px); padding: 20px; border-radius: 15px; margin-bottom: 20px; border: 1px solid rgba(52, 152, 219, 0.3); box-shadow: 0 8px 32px rgba(0, 0, 0, 0.2); }
        .progress-bar { height: 8px; background: rgba(255, 255, 255, 0.1); border-radius: 4px; margin-bottom: 20px; overflow: hidden; }
        .progress-fill { height: 100%; background: linear-gradient(45deg, #3498db, #2980b9); width: 0%; transition: width 0.3s ease; }
        .history-item { background: rgba(255, 255, 255, 0.08); backdrop-filter: blur(10px); padding: 15px; border-radius: 12px; margin-bottom: 10px; display: flex; justify-content: space-between; align-items: center; border: 1px solid rgba(52, 152, 219, 0.3); box-shadow: 0 4px 15px rgba(0, 0, 0, 0.2); }
        .history-item button { padding: 8px 12px; font-size: 14px; }
        .custom-colors-container { margin-top: 15px; display: none; }
        .custom-colors-container.show { display: block; animation: fadeIn 0.3s ease-in-out; }
        .color-picker-group { display: flex; align-items: center; margin-bottom: 10px; }
        .color-picker-group label { min-width: 120px; margin-right: 10px; }
        .color-picker { width: 50px; height: 40px; border: none; border-radius: 8px; cursor: pointer; }
        .color-code { margin-left: 10px; font-family: monospace; background: rgba(255, 255, 255, 0.1); padding: 5px 10px; border-radius: 5px; }
        .language-dropdown-container { margin-top: 15px; display: none; }
        .language-dropdown-container.show { display: block; animation: fadeIn 0.3s ease-in-out; }
        .language-search { margin-bottom: 10px; }
        .language-list { max-height: 200px; overflow-y: auto; background: rgba(255, 255, 255, 0.05); border-radius: 8px; padding: 10px; }
        .language-option { padding: 8px; cursor: pointer; border-radius: 4px; transition: background 0.2s; }
        .language-option:hover { background: rgba(52, 152, 219, 0.2); }
        .language-option.selected { background: rgba(52, 152, 219, 0.3); }
        .multi-select-container { margin-top: 15px; display: none; }
        .multi-select-container.show { display: block; animation: fadeIn 0.3s ease-in-out; }
        .multi-select-options { max-height: 200px; overflow-y: auto; background: rgba(255, 255, 255, 0.05); border-radius: 8px; padding: 10px; }
        .multi-select-option { display: flex; align-items: center; padding: 8px; cursor: pointer; border-radius: 4px; transition: background 0.2s; }
        .multi-select-option:hover { background: rgba(52, 152, 219, 0.2); }
        .multi-select-option input[type="checkbox"] { width: auto; margin-right: 10px; }
        .selected-items { margin-top: 10px; padding: 8px; background: rgba(52, 152, 219, 0.1); border-radius: 8px; min-height: 40px; }
        .selected-item { display: inline-block; background: rgba(52, 152, 219, 0.3); padding: 4px 8px; margin: 2px; border-radius: 4px; font-size: 14px; }
        .preview-container { margin-top: 20px; display: flex; flex-wrap: wrap; gap: 10px; }
        .notification { position: fixed; top: 20px; right: 20px; background: rgba(52, 152, 219, 0.9); backdrop-filter: blur(10px); color: white; padding: 15px 20px; border-radius: 12px; box-shadow: 0 4px 12px rgba(0, 0, 0, 0.3); transform: translateX(120%); transition: transform 0.3s ease; z-index: 1000; border: 1px solid rgba(255, 255, 255, 0.2); }
        .notification.show { transform: translateX(0); }
        .notification.error { background: rgba(231, 76, 60, 0.9); }
        .generating-animation { display: flex; flex-direction: column; align-items: center; justify-content: center; height: 60vh; }
        .generating-text { font-size: 2rem; margin-bottom: 20px; text-align: center; color: #3498db; }
        .lottie-container { width: 200px; height: 200px; margin: 20px 0; }
        footer { position: fixed; bottom: 0; left: 0; width: 100%; background: rgba(0, 0, 0, 0.5); backdrop-filter: blur(15px); padding: 15px; text-align: center; color: rgba(255, 255, 255, 0.8); font-size: 0.9rem; border-top: 1px solid rgba(52, 152, 219, 0.3); z-index: 100; }
        .option-container { margin-top: 15px; }
        .option { display: block; background: rgba(255, 255, 255, 0.1); border: 1px solid rgba(52, 152, 219, 0.3); border-radius: 8px; padding: 12px; margin-bottom: 10px; cursor: pointer; transition: all 0.3s ease; }
        .option:hover { background: rgba(52, 152, 219, 0.2); border-color: rgba(52, 152, 219, 0.6); }
        .option.selected { background: rgba(52, 152, 219, 0.3); border-color: #3498db; }
        .option input[type="radio"] { display: none; }
        .splash-screen { position: fixed; top: 0; left: 0; width: 100%; height: 100%; background: linear-gradient(135deg, #000000, #1a1a2e); display: flex; flex-direction: column; justify-content: center; align-items: center; z-index: 10000; transition: opacity 1s ease; }
        .splash-content { text-align: center; max-width: 600px; padding: 40px; }
        .splash-title { font-size: 3rem; margin-bottom: 20px; background: linear-gradient(45deg, #3498db, #ffffff); -webkit-background-clip: text; -webkit-text-fill-color: transparent; background-clip: text; }
        .splash-subtitle { font-size: 1.5rem; margin-bottom: 30px; color: rgba(255, 255, 255, 0.8); }
        .splash-animation { width: 300px; height: 300px; margin: 20px auto; }
        .splash-footer { margin-top: 40px; padding: 20px; background: rgba(255, 255, 255, 0.05); backdrop-filter: blur(10px); border-radius: 15px; border: 1px solid rgba(52, 152, 219, 0.3); }
        .splash-continue { margin-top: 30px; padding: 12px 30px; font-size: 1.1rem; background: linear-gradient(45deg, #3498db, #2980b9); border: none; color: white; border-radius: 30px; cursor: pointer; transition: all 0.3s ease; }
        .splash-continue:hover { transform: translateY(-3px); box-shadow: 0 10px 25px rgba(52, 152, 219, 0.4); }
        .history-btn { position: fixed; bottom: 100px; right: 20px; width: 60px; height: 60px; border-radius: 50%; background: linear-gradient(45deg, #3498db, #2980b9); color: white; border: none; display: flex; justify-content: center; align-items: center; font-size: 24px; cursor: pointer; box-shadow: 0 4px 15px rgba(52, 152, 219, 0.4); z-index: 99; transition: all 0.3s ease; }
        .history-btn:hover { transform: scale(1.1); box-shadow: 0 6px 20px rgba(52, 152, 219, 0.6); }
        .main-options { display: flex; flex-direction: column; gap: 20px; margin-top: 30px; }
        .option-card { background: rgba(255, 255, 255, 0.08); backdrop-filter: blur(10px); border-radius: 15px; padding: 25px; border: 1px solid rgba(52, 152, 219, 0.3); box-shadow: 0 8px 32px rgba(0, 0, 0, 0.2); cursor: pointer; transition: all 0.3s ease; }
        .option-card:hover { transform: translateY(-5px); box-shadow: 0 12px 40px rgba(52, 152, 219, 0.4); border-color: rgba(52, 152, 219, 0.6); }
        .option-card h3 { font-size: 1.5rem; margin-bottom: 10px; color: #3498db; }
        .option-card p { color: rgba(255, 255, 255, 0.8); }
        .font-list { max-height: 200px; overflow-y: auto; background: rgba(255, 255, 255, 0.05); border-radius: 8px; padding: 10px; margin-top: 10px; display: none; }
        .font-list.show { display: block; }
        .font-option { padding: 8px; cursor: pointer; border-radius: 4px; transition: background 0.2s; }
        .font-option:hover { background: rgba(52, 152, 219, 0.2); }
        .font-option.selected { background: rgba(52, 152, 219, 0.3); }
        .tutorial-section { max-width: 800px; margin: 0 auto; padding: 30px; }
        .tutorial-header { text-align: center; margin-bottom: 40px; }
        .tutorial-header h2 { font-size: 2.5rem; margin-bottom: 15px; background: linear-gradient(45deg, #3498db, #ffffff); -webkit-background-clip: text; -webkit-text-fill-color: transparent; background-clip: text; }
        .tutorial-header p { font-size: 1.2rem; color: rgba(255, 255, 255, 0.8); }
        .tutorial-steps { display: flex; flex-direction: column; gap: 30px; }
        .tutorial-step { background: rgba(255, 255, 255, 0.08); backdrop-filter: blur(10px); border-radius: 15px; padding: 25px; border: 1px solid rgba(52, 152, 219, 0.3); box-shadow: 0 8px 32px rgba(0, 0, 0, 0.2); }
        .step-number { display: inline-block; width: 40px; height: 40px; background: linear-gradient(45deg, #3498db, #2980b9); border-radius: 50%; text-align: center; line-height: 40px; font-weight: bold; margin-bottom: 15px; }
        .step-content h3 { font-size: 1.5rem; margin-bottom: 15px; color: #3498db; }
        .step-content p { margin-bottom: 15px; line-height: 1.6; color: rgba(255, 255, 255, 0.9); }
        .step-content ul { margin-left: 20px; margin-bottom: 15px; }
        .step-content li { margin-bottom: 8px; color: rgba(255, 255, 255, 0.9); }
        .step-image { width: 100%; max-width: 600px; height: auto; border-radius: 10px; margin: 15px auto; display: block; border: 2px solid rgba(52, 152, 219, 0.3); }
        .tutorial-actions { text-align: center; margin-top: 40px; }
        .tutorial-note { background: rgba(52, 152, 219, 0.2); border-left: 4px solid #3498db; padding: 15px; border-radius: 8px; margin: 20px 0; }
        .tutorial-note p { margin: 0; color: rgba(255, 255, 255, 0.9); }
        .file-list { background: rgba(255, 255, 255, 0.05); border-radius: 10px; padding: 15px; margin-top: 20px; }
        .file-item { display: flex; justify-content: space-between; align-items: center; padding: 10px; border-bottom: 1px solid rgba(255, 255, 255, 0.1); }
        .file-item:last-child { border-bottom: none; }
        .file-name { font-weight: 500; }
        .file-size { color: rgba(255, 255, 255, 0.6); font-size: 0.9rem; }
        @media (max-width: 768px) {
            .container { padding: 20px; }
            h1 { font-size: 2rem; }
            button { width: 100%; margin-right: 0; }
            .splash-title { font-size: 2.5rem; }
            .splash-subtitle { font-size: 1.2rem; }
            .tutorial-header h2 { font-size: 2rem; }
            .step-content h3 { font-size: 1.3rem; }
        }
    </style>
</head>
<body>
    <!-- Splash Screen -->
    <div id="splash-screen" class="splash-screen">
        <div class="splash-content">
            <h1 class="splash-title">HOPE-INT-CORE</h1>
            <p class="splash-subtitle">Create stunning presentations, printable reports, assignments, and complete projects with AI</p>
            <div class="splash-animation">
                <lottie-player src="https://assets4.lottiefiles.com/packages/lf20_DMgKk1.json" background="transparent" speed="1" loop autoplay></lottie-player>
            </div>
            <div class="splash-footer">
                <p>Developed by Justin</p>
                <p>Under HOPE Research & development Team</p>
            </div>
            <button class="splash-continue" id="continue-to-app">Continue to App</button>
        </div>
    </div>

    <div id="three-background"></div>
    
    <div class="container">
        <h1>HOPE-INT-CORE</h1>
        
        <!-- Tutorial Section -->
        <div id="tutorial-section" class="section">
            <div class="tutorial-section">
                <div class="tutorial-header">
                    <h2>Welcome to HOPE-INT-CORE!</h2>
                    <p>Let's get you set up with your Gemini API key to start creating amazing content</p>
                </div>
                
                <div class="tutorial-steps">
                    <div class="tutorial-step">
                        <div class="step-number">1</div>
                        <div class="step-content">
                            <h3>What is a Gemini API Key?</h3>
                            <p>The Gemini API key is a unique identifier that allows HOPE-INT-CORE to access Google's powerful Gemini AI model to generate your content. It's like a password that gives our app permission to use Google's AI services.</p>
                            <div class="tutorial-note">
                                <p><strong>Note:</strong> Your API key is private and should never be shared with others. We store it securely in your browser only.</p>
                            </div>
                        </div>
                    </div>
                    
                    <div class="tutorial-step">
                        <div class="step-number">2</div>
                        <div class="step-content">
                            <h3>Getting Your Gemini API Key</h3>
                            <p>Follow these steps to get your free API key from Google:</p>
                            <ul>
                                <li>Go to <a href="https://makersuite.google.com/app/apikey" target="_blank" style="color: #3498db;">Google AI Studio</a></li>
                                <li>Sign in with your Google account</li>
                                <li>Click on "Get API Key" button</li>
                                <li>Choose "Create API key in new project"</li>
                                <li>Create a new project and select it</li>
                                <li>Copy the generated API key</li>
                            </ul>
                        </div>
                    </div>
                    
                    <div class="tutorial-step">
                        <div class="step-number">3</div>
                        <div class="step-content">
                            <h3>Security & Privacy</h3>
                            <p>Your API key is stored locally in your browser and is never sent to our servers. Google's AI processes your topics, but we don't store any of your content or personal information.</p>
                            <div class="tutorial-note">
                                <p><strong>Important:</strong> Never share your API key publicly or commit it to code repositories.</p>
                            </div>
                        </div>
                    </div>
                </div>
                
                <div class="tutorial-actions">
                    <button id="got-it-btn" class="splash-continue">I Understand, Take Me to API Key Setup</button>
                </div>
            </div>
        </div>
        
        <!-- API Key Section -->
        <div id="api-key-section" class="section">
            <div class="form-group">
                <label for="api-key">Enter your Gemini API Key:</label>
                <input type="password" id="api-key" placeholder="Your Gemini API Key">
            </div>
            <button id="save-api-key">Save API Key</button>
            <div id="api-status"></div>
            <div style="margin-top: 20px;">
                <button id="show-tutorial-btn" style="background: rgba(52, 152, 219, 0.3);">Need Help? Show Tutorial</button>
            </div>
        </div>
        
        <!-- Loading Screen -->
        <div id="loading-section" class="section">
            <div class="loading-screen">
                <div class="loading-text">AI now Getting ready</div>
                <div class="loading-credit">Developed by Justin</div>
                <div class="loading-credit">Developed under HOPE Research & development Team</div>
                <div class="lottie-container">
                    <lottie-player src="https://assets9.lottiefiles.com/packages/lf20_DMgKk1.json" background="transparent" speed="1" loop autoplay></lottie-player>
                </div>
            </div>
        </div>
        
        <!-- Main Options Section -->
        <div id="main-options-section" class="section">
            <h2>What would you like to create?</h2>
            <div class="main-options">
                <div class="option-card" id="create-ppt-card">
                    <h3>Create Presentation</h3>
                    <p>Generate an interactive 3D presentation with animations and multimedia elements</p>
                </div>
                <div class="option-card" id="create-report-card">
                    <h3>Create Printable Report</h3>
                    <p>Generate a professional report that can be downloaded as PDF</p>
                </div>
                <div class="option-card" id="create-assignment-card">
                    <h3>Create Assignment</h3>
                    <p>Generate a detailed assignment with questions, instructions, and grading criteria</p>
                </div>
                <div class="option-card" id="create-project-card">
                    <h3>Create Complete Project</h3>
                    <p>Generate a complete mini/final year project with source code, documentation, and workflow diagrams</p>
                </div>
            </div>
        </div>
        
        <!-- Topic Input Section -->
        <div id="topic-section" class="section">
            <div class="form-group">
                <label for="presentation-topic">Enter your presentation topic:</label>
                <input type="text" id="presentation-topic" placeholder="e.g., Climate Change, Artificial Intelligence, etc.">
            </div>
            <button id="generate-questions">Generate Questions</button>
        </div>
        
        <!-- Report Topic Section -->
        <div id="report-topic-section" class="section">
            <div class="form-group">
                <label for="report-topic">Enter your report topic:</label>
                <input type="text" id="report-topic" placeholder="e.g., Climate Change, Artificial Intelligence, etc.">
            </div>
            <button id="generate-classification-questions">Next</button>
        </div>
        
        <!-- Assignment Topic Section -->
        <div id="assignment-topic-section" class="section">
            <div class="form-group">
                <label for="assignment-topic">Enter your assignment topic:</label>
                <input type="text" id="assignment-topic" placeholder="e.g., Climate Change, Artificial Intelligence, etc.">
            </div>
            <button id="generate-assignment-classification-questions">Next</button>
        </div>
        
        <!-- Project Topic Section -->
        <div id="project-topic-section" class="section">
            <div class="form-group">
                <label for="project-topic">Enter your project topic:</label>
                <input type="text" id="project-topic" placeholder="e.g., E-commerce Website, Mobile App, Data Analysis System, etc.">
            </div>
            <div class="form-group">
                <label for="project-level">Select project level:</label>
                <select id="project-level">
                    <option value="">Select project level</option>
                    <option value="mini">Mini Project</option>
                    <option value="final">Final Year Project</option>
                </select>
            </div>
            <button id="generate-project-classification-questions">Next</button>
        </div>
        
        <!-- Generating Classification Questions Section -->
        <div id="generating-classification-section" class="section">
            <div class="generating-animation">
                <div class="generating-text">Generating classification questions...</div>
                <div class="lottie-container">
                    <lottie-player src="https://assets4.lottiefiles.com/packages/lf20_fcfjwiyb.json" background="transparent" speed="1" loop autoplay></lottie-player>
                </div>
                <p>AI is analyzing your topic to create personalized questions</p>
            </div>
        </div>
        
        <!-- Generating Assignment Classification Questions Section -->
        <div id="generating-assignment-classification-section" class="section">
            <div class="generating-animation">
                <div class="generating-text">Generating assignment classification questions...</div>
                <div class="lottie-container">
                    <lottie-player src="https://assets4.lottiefiles.com/packages/lf20_fcfjwiyb.json" background="transparent" speed="1" loop autoplay></lottie-player>
                </div>
                <p>AI is analyzing your topic to create personalized questions</p>
            </div>
        </div>
        
        <!-- Generating Project Classification Questions Section -->
        <div id="generating-project-classification-section" class="section">
            <div class="generating-animation">
                <div class="generating-text">Generating project classification questions...</div>
                <div class="lottie-container">
                    <lottie-player src="https://assets4.lottiefiles.com/packages/lf20_fcfjwiyb.json" background="transparent" speed="1" loop autoplay></lottie-player>
                </div>
                <p>AI is analyzing your topic to create personalized questions</p>
            </div>
        </div>
        
        <!-- Generating PPT Classification Questions Section -->
        <div id="generating-ppt-classification-section" class="section">
            <div class="generating-animation">
                <div class="generating-text">Generating presentation classification questions...</div>
                <div class="lottie-container">
                    <lottie-player src="https://assets4.lottiefiles.com/packages/lf20_fcfjwiyb.json" background="transparent" speed="1" loop autoplay></lottie-player>
                </div>
                <p>AI is analyzing your topic to create personalized questions</p>
            </div>
        </div>
        
        <!-- Classification Questions Section -->
        <div id="classification-questions-section" class="section">
            <div class="progress-bar">
                <div class="progress-fill" id="classification-progress-fill"></div>
            </div>
            <div id="classification-questions-container"></div>
            <button id="finish-classification-btn" disabled>Continue to Report Options</button>
        </div>
        
        <!-- Assignment Classification Questions Section -->
        <div id="assignment-classification-questions-section" class="section">
            <div class="progress-bar">
                <div class="progress-fill" id="assignment-classification-progress-fill"></div>
            </div>
            <div id="assignment-classification-questions-container"></div>
            <button id="finish-assignment-classification-btn" disabled>Continue to Assignment Options</button>
        </div>
        
        <!-- Project Classification Questions Section -->
        <div id="project-classification-questions-section" class="section">
            <div class="progress-bar">
                <div class="progress-fill" id="project-classification-progress-fill"></div>
            </div>
            <div id="project-classification-questions-container"></div>
            <button id="finish-project-classification-btn" disabled>Continue to Project Options</button>
        </div>
        
        <!-- PPT Classification Questions Section -->
        <div id="ppt-classification-questions-section" class="section">
            <div class="progress-bar">
                <div class="progress-fill" id="ppt-classification-progress-fill"></div>
            </div>
            <div id="ppt-classification-questions-container"></div>
            <button id="finish-ppt-classification-btn" disabled>Continue to Presentation Options</button>
        </div>
        
        <!-- Questions Section -->
        <div id="questions-section" class="section">
            <div class="progress-bar">
                <div class="progress-fill" id="progress-fill"></div>
            </div>
            <div id="questions-container"></div>
            <div id="custom-colors-container" class="custom-colors-container">
                <div class="color-picker-group">
                    <label for="custom-color-1">First Color:</label>
                    <input type="color" id="custom-color-1" class="color-picker" value="#3498db">
                    <span id="color-code-1" class="color-code">#3498db</span>
                </div>
                <div class="color-picker-group">
                    <label for="custom-color-2">Second Color:</label>
                    <input type="color" id="custom-color-2" class="color-picker" value="#e74c3c">
                    <span id="color-code-2" class="color-code">#e74c3c</span>
                </div>
            </div>
            <div id="language-dropdown-container" class="language-dropdown-container">
                <div class="language-search">
                    <input type="text" id="language-search" placeholder="Search languages...">
                </div>
                <div id="language-list" class="language-list"></div>
            </div>
            <button id="generate-presentation" disabled>Generate Presentation</button>
        </div>
        
        <!-- Report Questions Section -->
        <div id="report-questions-section" class="section">
            <div class="progress-bar">
                <div class="progress-fill" id="report-progress-fill"></div>
            </div>
            <div id="report-questions-container"></div>
            <div id="font-list-container" class="font-list">
                <!-- Font options will be populated here -->
            </div>
            <button id="generate-report" disabled>Generate Report</button>
        </div>
        
        <!-- Assignment Questions Section -->
        <div id="assignment-questions-section" class="section">
            <div class="progress-bar">
                <div class="progress-fill" id="assignment-progress-fill"></div>
            </div>
            <div id="assignment-questions-container"></div>
            <div id="assignment-font-list-container" class="font-list">
                <!-- Font options will be populated here -->
            </div>
            <button id="generate-assignment" disabled>Generate Assignment</button>
        </div>
        
        <!-- Project Questions Section -->
        <div id="project-questions-section" class="section">
            <div class="progress-bar">
                <div class="progress-fill" id="project-progress-fill"></div>
            </div>
            <div id="project-questions-container"></div>
            <div id="project-font-list-container" class="font-list">
                <!-- Font options will be populated here -->
            </div>
            <button id="generate-project" disabled>Generate Project</button>
        </div>
        
        <!-- Generating Section -->
        <div id="generating-section" class="section">
            <div class="generating-animation">
                <div class="generating-text">Creating your presentation...</div>
                <div class="lottie-container">
                    <lottie-player src="https://assets4.lottiefiles.com/packages/lf20_fcfjwiyb.json" background="transparent" speed="1" loop autoplay></lottie-player>
                </div>
                <p>This may take a moment as we generate your custom 3D presentation</p>
            </div>
        </div>
        
        <!-- Generating Report Section -->
        <div id="generating-report-section" class="section">
            <div class="generating-animation">
                <div class="generating-text">Creating your report...</div>
                <div class="lottie-container">
                    <lottie-player src="https://assets4.lottiefiles.com/packages/lf20_fcfjwiyb.json" background="transparent" speed="1" loop autoplay></lottie-player>
                </div>
                <p>This may take a moment as we generate your custom report</p>
            </div>
        </div>
        
        <!-- Generating Assignment Section -->
        <div id="generating-assignment-section" class="section">
            <div class="generating-animation">
                <div class="generating-text">Creating your assignment...</div>
                <div class="lottie-container">
                    <lottie-player src="https://assets4.lottiefiles.com/packages/lf20_fcfjwiyb.json" background="transparent" speed="1" loop autoplay></lottie-player>
                </div>
                <p>This may take a moment as we generate your custom assignment</p>
            </div>
        </div>
        
        <!-- Generating Project Section -->
        <div id="generating-project-section" class="section">
            <div class="generating-animation">
                <div class="generating-text">Creating your complete project...</div>
                <div class="lottie-container">
                    <lottie-player src="https://assets4.lottiefiles.com/packages/lf20_fcfjwiyb.json" background="transparent" speed="1" loop autoplay></lottie-player>
                </div>
                <p>This may take a moment as we generate your complete project with source code, documentation, and workflow diagrams</p>
            </div>
        </div>
        
        <!-- Preview Section -->
        <div id="preview-section" class="section">
            <h2>Your presentation is ready!</h2>
            <div class="preview-container">
                <button id="preview-btn">Preview in New Tab</button>
                <button id="new-presentation-btn">Create New Presentation</button>
            </div>
        </div>
        
        <!-- Report Preview Section -->
        <div id="report-preview-section" class="section">
            <h2>Your report is ready!</h2>
            <div class="preview-container">
                <button id="preview-report-btn">Preview in New Tab</button>
                <button id="download-report-btn">Download as PDF</button>
                <button id="new-report-btn">Create New Report</button>
            </div>
        </div>
        
        <!-- Assignment Preview Section -->
        <div id="assignment-preview-section" class="section">
            <h2>Your assignment is ready!</h2>
            <div class="preview-container">
                <button id="preview-assignment-btn">Preview in New Tab</button>
                <button id="download-assignment-btn">Download as PDF</button>
                <button id="new-assignment-btn">Create New Assignment</button>
            </div>
        </div>
        
        <!-- Project Preview Section -->
        <div id="project-preview-section" class="section">
            <h2>Your complete project is ready!</h2>
            <div class="file-list" id="project-file-list">
                <!-- Project files will be listed here -->
            </div>
            <div class="preview-container">
                <button id="download-project-btn">Download Complete Project</button>
                <button id="preview-documentation-btn">Preview Documentation</button>
                <button id="new-project-btn">Create New Project</button>
            </div>
        </div>
        
        <!-- History Section -->
        <div id="history-section" class="section">
            <h2>Recent Creations</h2>
            <div id="history-container"></div>
            <button id="clear-history-btn">Clear History</button>
            <button id="new-creation-from-history-btn">Create New</button>
        </div>
    </div>
    
    <footer>
        Developed under HOPE Research Team | Developed by Justin
    </footer>
    
    <button class="history-btn" id="history-toggle" title="View History">📋</button>
    
    <div id="notification" class="notification"></div>

    <script>
        // Application State - Structured and organized
        const appState = {
            user: {
                apiKey: '',
                hasSeenTutorial: false
            },
            project: {
                type: '',
                topic: '',
                level: ''
            },
            customization: {
                theme: '',
                slideCount: '',
                language: 'English',
                font: '',
                fontSize: '',
                style: '',
                elements: ''
            },
            presentation: {
                animationStyle: '',
                colorTheme: '',
                customColor1: '#3498db',
                customColor2: '#e74c3c',
                bgitem: '',
                structure: '',
                presentationStyle: '',
                advancedAnimations: '',
                interactiveElements: '',
                dataVisualization: '',
                includeImages: '',
                generatedContent: ''
            },
            report: {
                generatedContent: ''
            },
            assignment: {
                gradeLevel: '',
                type: '',
                length: '',
                difficulty: '',
                resources: '',
                submission: '',
                generatedContent: ''
            },
            projectDetails: {
                type: '',
                languages: [],
                framework: '',
                database: '',
                ui: '',
                documentation: '',
                deployment: '',
                generatedContent: {},
                includeCurrentDate: false,
                currentDateTime: ''
            },
            // Classification state
            classification: {
                questions: [],
                answers: [],
                currentIndex: 0
            },
            // History
            history: {
                presentations: [],
                reports: [],
                assignments: [],
                projects: []
            }
        };

        // Constants
        const GEMINI_API_ENDPOINT = 'https://generativelanguage.googleapis.com/v1beta/models/gemini-2.5-pro:generateContent';
        const LANGUAGES = [
            "English", "Spanish", "French", "German", "Italian", "Portuguese", "Dutch", "Russian", 
            "Japanese", "Korean", "Chinese (Simplified)", "Chinese (Traditional)", "Arabic", 
            "Hindi", "Bengali", "Punjabi", "Marathi", "Tamil", "Telugu", "Gujarati", "Kannada", 
            "Malayalam", "Odia", "Assamese", "Urdu", "Persian", "Turkish", "Polish", "Ukrainian", 
            "Romanian", "Czech", "Hungarian", "Swedish", "Danish", "Norwegian", "Finnish", 
            "Greek", "Hebrew", "Thai", "Vietnamese", "Indonesian", "Malay", "Tagalog", 
            "Swahili", "Zulu", "Afrikaans", "Amharic", "Yoruba", "Igbo", "Somali", 
            "Nepali", "Sinhala", "Burmese", "Khmer", "Lao", "Mongolian", "Kazakh", 
            "Uzbek", "Azerbaijani", "Georgian", "Armenian", "Lithuanian", "Latvian", 
            "Estonian", "Slovak", "Slovenian", "Croatian", "Serbian", "Bosnian", 
            "Montenegrin", "Macedonian", "Bulgarian", "Albanian", "Belarusian", 
            "Moldovan", "Icelandic", "Faroese", "Basque", "Catalan", "Galician", 
            "Welsh", "Irish", "Scottish Gaelic", "Breton", "Cornish", "Manx", 
            "Esperanto", "Latin", "Ancient Greek", "Sanskrit", "Pali", "Tibetan", 
            "Mongolian (Traditional)", "Javanese", "Sundanese", "Madurese", "Balinese", 
            "Minangkabau", "Buginese", "Makassarese", "Acehnese", "Banjarese", 
            "Tausug", "Maguindanao", "Maranao", "Ilocano", "Hiligaynon", "Waray-Waray", 
            "Bicolano", "Pangasinan", "Kapampangan", "Ibanag", "Gaddang", "Ifugao", 
            "Kalinga", "Bontoc", "Tboli", "T'boli", "Manobo", "Bagobo", "Mandaya", 
            "Mansaka", "Dibabawon", "Manguangan", "Kalagan", "Tagakaulo", "Blan", 
            "Talaandig", "Higaonon", "Bukidnon", "Tigwahanon", "Matigsalug", "Obo", 
            "Tinananon", "Tigwa", "Umayamnon", "Western Bukidnon Manobo", "Eastern Bukidnon Manobo", 
            "Kinamiging", "Cotabato Manobo", "Dibabawon Manobo", "Agusan Manobo", 
            "Surigao Manobo", "Western Visayan", "Central Visayan", "Southern Visayan", 
            "Northern Visayan", "Ati", "Sulod", "Magahat", "Negros Occidental Hiligaynon", 
            "Capiznon", "Aklanon", "Kinaray-a", "Cuyonon", "Ratagnon", "Batak", 
            "Palawano", "Tagbanwa", "Cuyonon", "Agutaynen", "Tausug", "Sama", 
            "Yakan", "Jama Mapun", "Sama-Bajau", "Badjao", "Molbog", "Palawano", "Tagbanwa", 
            "Cuyonon", "Agutaynen", "Tausug", "Sama", "Yakan", "Jama Mapun", "Sama-Bajau", 
            "Badjao", "Molbog", "Palawano", "Tagbanwa", "Cuyonon", "Agutaynen"
        ];
        
        const PROGRAMMING_LANGUAGES = [
            "JavaScript/TypeScript", "Python", "Java", "C#", "PHP", "Ruby", "Go", "Swift", 
            "Kotlin", "C++", "C", "Rust", "Scala", "Perl", "MATLAB", "R", "SQL", "HTML/CSS",
            "Dart", "Lua", "Assembly", "VB.NET", "Objective-C", "F#", "Haskell", "Elixir",
            "Erlang", "Clojure", "Groovy", "Julia", "TypeScript", "Bash", "PowerShell"
        ];
        
        const FONTS = [
            "Arial", "Verdana", "Helvetica", "Times New Roman", "Georgia", 
            "Courier New", "Brush Script MT", "Lucida Handwriting", "Comic Sans MS",
            "Impact", "Lucida Console", "Tahoma", "Trebuchet MS", "Palatino",
            "Garamond", "Bookman", "Century Gothic", "Franklin Gothic Medium"
        ];

        // Fallback classification questions
        const FALLBACK_CLASSIFICATION_QUESTIONS = {
            presentation: [
                { question: "What is the primary purpose of this presentation?", options: ["Educational", "Business", "Informative", "Entertainment"] },
                { question: "Who is the target audience?", options: ["Students", "Professionals", "General public", "Executives"] },
                { question: "What presentation style do you prefer?", options: ["Formal", "Casual", "Creative", "Technical"] },
                { question: "How detailed should the content be?", options: ["Overview", "Moderate detail", "In-depth", "Comprehensive"] },
                { question: "What type of visuals do you want?", options: ["Minimal", "Moderate", "Extensive", "Interactive"] }
            ],
            report: [
                { question: "What is the primary purpose of this report?", options: ["Informative", "Analytical", "Persuasive", "Instructional"] },
                { question: "Who is the target audience?", options: ["General public", "Professionals", "Academics", "Executives"] },
                { question: "What is the expected length?", options: ["Short (1-3 pages)", "Medium (4-10 pages)", "Long (11+ pages)"] },
                { question: "What level of detail is required?", options: ["Overview", "In-depth", "Comprehensive"] },
                { question: "Should the report include data and statistics?", options: ["Yes, extensively", "Yes, moderately", "No"] }
            ],
            assignment: [
                { question: "What is the grade level?", options: ["Elementary (K-5)", "Middle School (6-8)", "High School (9-12)", "College/University"] },
                { question: "What subject area?", options: ["Science", "Mathematics", "Language Arts", "Social Studies", "Arts", "Technology", "Physical Education"] },
                { question: "What type of assignment?", options: ["Essay/Research Paper", "Problem Set", "Project-based", "Quiz/Test", "Presentation", "Lab Report"] },
                { question: "How long should it be?", options: ["Short (1-2 pages)", "Medium (3-5 pages)", "Long (6+ pages)"] },
                { question: "What difficulty level?", options: ["Beginner", "Intermediate", "Advanced", "Mixed Levels"] }
            ],
            project: [
                { question: "What type of project?", options: ["Web Application", "Mobile App", "Desktop Software", "Data Analysis System", "Machine Learning Model", "IoT Solution"] },
                { question: "What is the primary purpose?", options: ["Educational", "Business", "Personal", "Research", "Entertainment"] },
                { question: "Who is the target audience?", options: ["Students", "Professionals", "General public", "Specific industry", "Researchers"] },
                { question: "What is the expected complexity?", options: ["Beginner", "Intermediate", "Advanced", "Expert"] },
                { question: "What is the preferred timeline?", options: ["1-2 weeks", "3-4 weeks", "1-2 months", "3+ months"] }
            ]
        };

        // DOM Elements
        const sections = {
            tutorial: document.getElementById('tutorial-section'),
            apiKey: document.getElementById('api-key-section'),
            loading: document.getElementById('loading-section'),
            mainOptions: document.getElementById('main-options-section'),
            topic: document.getElementById('topic-section'),
            reportTopic: document.getElementById('report-topic-section'),
            assignmentTopic: document.getElementById('assignment-topic-section'),
            projectTopic: document.getElementById('project-topic-section'),
            generatingClassification: document.getElementById('generating-classification-section'),
            generatingAssignmentClassification: document.getElementById('generating-assignment-classification-section'),
            generatingProjectClassification: document.getElementById('generating-project-classification-section'),
            generatingPptClassification: document.getElementById('generating-ppt-classification-section'),
            classificationQuestions: document.getElementById('classification-questions-section'),
            assignmentClassificationQuestions: document.getElementById('assignment-classification-questions-section'),
            projectClassificationQuestions: document.getElementById('project-classification-questions-section'),
            pptClassificationQuestions: document.getElementById('ppt-classification-questions-section'),
            questions: document.getElementById('questions-section'),
            reportQuestions: document.getElementById('report-questions-section'),
            assignmentQuestions: document.getElementById('assignment-questions-section'),
            projectQuestions: document.getElementById('project-questions-section'),
            generating: document.getElementById('generating-section'),
            generatingReport: document.getElementById('generating-report-section'),
            generatingAssignment: document.getElementById('generating-assignment-section'),
            generatingProject: document.getElementById('generating-project-section'),
            preview: document.getElementById('preview-section'),
            reportPreview: document.getElementById('report-preview-section'),
            assignmentPreview: document.getElementById('assignment-preview-section'),
            projectPreview: document.getElementById('project-preview-section'),
            history: document.getElementById('history-section')
        };

        const elements = {
            apiKeyInput: document.getElementById('api-key'),
            saveApiKeyBtn: document.getElementById('save-api-key'),
            apiStatus: document.getElementById('api-status'),
            presentationTopic: document.getElementById('presentation-topic'),
            generateQuestionsBtn: document.getElementById('generate-questions'),
            questionsContainer: document.getElementById('questions-container'),
            progressFill: document.getElementById('progress-fill'),
            generatePresentationBtn: document.getElementById('generate-presentation'),
            previewBtn: document.getElementById('preview-btn'),
            newPresentationBtn: document.getElementById('new-presentation-btn'),
            historyContainer: document.getElementById('history-container'),
            clearHistoryBtn: document.getElementById('clear-history-btn'),
            newCreationFromHistoryBtn: document.getElementById('new-creation-from-history-btn'),
            notification: document.getElementById('notification'),
            historyToggle: document.getElementById('history-toggle'),
            splashScreen: document.getElementById('splash-screen'),
            continueToApp: document.getElementById('continue-to-app'),
            customColorsContainer: document.getElementById('custom-colors-container'),
            languageDropdownContainer: document.getElementById('language-dropdown-container'),
            languageSearch: document.getElementById('language-search'),
            languageList: document.getElementById('language-list'),
            gotItBtn: document.getElementById('got-it-btn'),
            showTutorialBtn: document.getElementById('show-tutorial-btn'),
            
            // Report elements
            createPptCard: document.getElementById('create-ppt-card'),
            createReportCard: document.getElementById('create-report-card'),
            reportTopicInput: document.getElementById('report-topic'),
            generateClassificationQuestionsBtn: document.getElementById('generate-classification-questions'),
            classificationQuestionsContainer: document.getElementById('classification-questions-container'),
            classificationProgressFill: document.getElementById('classification-progress-fill'),
            finishClassificationBtn: document.getElementById('finish-classification-btn'),
            reportQuestionsContainer: document.getElementById('report-questions-container'),
            reportProgressFill: document.getElementById('report-progress-fill'),
            generateReportBtn: document.getElementById('generate-report'),
            fontListContainer: document.getElementById('font-list-container'),
            previewReportBtn: document.getElementById('preview-report-btn'),
            downloadReportBtn: document.getElementById('download-report-btn'),
            newReportBtn: document.getElementById('new-report-btn'),
            
            // Assignment elements
            createAssignmentCard: document.getElementById('create-assignment-card'),
            assignmentTopicInput: document.getElementById('assignment-topic'),
            generateAssignmentClassificationQuestionsBtn: document.getElementById('generate-assignment-classification-questions'),
            assignmentClassificationQuestionsContainer: document.getElementById('assignment-classification-questions-container'),
            assignmentClassificationProgressFill: document.getElementById('assignment-classification-progress-fill'),
            finishAssignmentClassificationBtn: document.getElementById('finish-assignment-classification-btn'),
            assignmentQuestionsContainer: document.getElementById('assignment-questions-container'),
            assignmentProgressFill: document.getElementById('assignment-progress-fill'),
            generateAssignmentBtn: document.getElementById('generate-assignment'),
            assignmentFontListContainer: document.getElementById('assignment-font-list-container'),
            previewAssignmentBtn: document.getElementById('preview-assignment-btn'),
            downloadAssignmentBtn: document.getElementById('download-assignment-btn'),
            newAssignmentBtn: document.getElementById('new-assignment-btn'),
            
            // Project elements
            createProjectCard: document.getElementById('create-project-card'),
            projectTopicInput: document.getElementById('project-topic'),
            projectLevelSelect: document.getElementById('project-level'),
            generateProjectClassificationQuestionsBtn: document.getElementById('generate-project-classification-questions'),
            projectClassificationQuestionsContainer: document.getElementById('project-classification-questions-container'),
            projectClassificationProgressFill: document.getElementById('project-classification-progress-fill'),
            finishProjectClassificationBtn: document.getElementById('finish-project-classification-btn'),
            projectQuestionsContainer: document.getElementById('project-questions-container'),
            projectProgressFill: document.getElementById('project-progress-fill'),
            generateProjectBtn: document.getElementById('generate-project'),
            projectFontListContainer: document.getElementById('project-font-list-container'),
            projectFileList: document.getElementById('project-file-list'),
            downloadProjectBtn: document.getElementById('download-project-btn'),
            previewDocumentationBtn: document.getElementById('preview-documentation-btn'),
            newProjectBtn: document.getElementById('new-project-btn'),
            
            // PPT classification elements
            pptClassificationQuestionsContainer: document.getElementById('ppt-classification-questions-container'),
            pptClassificationProgressFill: document.getElementById('ppt-classification-progress-fill'),
            finishPptClassificationBtn: document.getElementById('finish-ppt-classification-btn')
        };

        // Question Flow Class - Reusable component for all question flows
        class QuestionFlow {
            constructor(questions, container, progressFill, finishBtn, onFinish) {
                this.questions = questions;
                this.container = container;
                this.progressFill = progressFill;
                this.finishBtn = finishBtn;
                this.onFinish = onFinish;
                this.currentIndex = 0;
                this.answers = new Array(questions.length).fill('');
            }

            renderCurrentQuestion() {
                const progress = ((this.currentIndex + 1) / this.questions.length) * 100;
                this.progressFill.style.width = `${progress}%`;
                
                const currentQuestion = this.questions[this.currentIndex];
                const selectedOption = this.answers[this.currentIndex];
                
                // Check if this is a multi-select question
                if (currentQuestion.isMultiSelect) {
                    this.renderMultiSelectQuestion(currentQuestion, selectedOption);
                } else {
                    this.renderSingleSelectQuestion(currentQuestion, selectedOption);
                }
            }

            renderSingleSelectQuestion(currentQuestion, selectedOption) {
                this.container.innerHTML = `
                    <div class="question-container">
                        <h3>Question ${this.currentIndex + 1} of ${this.questions.length}</h3>
                        <p>${currentQuestion.question}</p>
                        <div class="option-container">
                            ${currentQuestion.options.map((option, index) => `
                                <label class="option ${selectedOption === option ? 'selected' : ''}">
                                    <input type="radio" name="question-${this.currentIndex}" value="${option}" ${selectedOption === option ? 'checked' : ''}>
                                    ${option}
                                </label>
                            `).join('')}
                        </div>
                        <div style="margin-top: 15px;">
                            ${this.currentIndex > 0 ? '<button id="prev-question-btn">Previous</button>' : ''}
                            ${this.currentIndex < this.questions.length - 1 ? '<button id="next-question-btn">Next</button>' : '<button id="finish-questions-btn">Finish</button>'}
                        </div>
                    </div>
                `;
                
                this.attachSingleSelectListeners();
            }

            renderMultiSelectQuestion(currentQuestion, selectedOptions) {
                this.container.innerHTML = `
                    <div class="question-container">
                        <h3>Question ${this.currentIndex + 1} of ${this.questions.length}</h3>
                        <p>${currentQuestion.question}</p>
                        <div class="multi-select-container show">
                            <div class="multi-select-options">
                                ${currentQuestion.options.map((option, index) => `
                                    <div class="multi-select-option">
                                        <input type="checkbox" id="option-${index}" value="${option}" ${selectedOptions && selectedOptions.includes(option) ? 'checked' : ''}>
                                        <label for="option-${index}">${option}</label>
                                    </div>
                                `).join('')}
                            </div>
                            <div class="selected-items" id="selected-items">
                                ${selectedOptions && selectedOptions.length > 0 ? 
                                    selectedOptions.map(opt => `<span class="selected-item">${opt}</span>`).join('') : 
                                    'No items selected'}
                            </div>
                        </div>
                        <div style="margin-top: 15px;">
                            ${this.currentIndex > 0 ? '<button id="prev-question-btn">Previous</button>' : ''}
                            ${this.currentIndex < this.questions.length - 1 ? '<button id="next-question-btn">Next</button>' : '<button id="finish-questions-btn">Finish</button>'}
                        </div>
                    </div>
                `;
                
                this.attachMultiSelectListeners();
            }

            attachSingleSelectListeners() {
                const optionElements = this.container.querySelectorAll('.option');
                optionElements.forEach(option => {
                    option.addEventListener('click', () => {
                        optionElements.forEach(opt => opt.classList.remove('selected'));
                        option.classList.add('selected');
                        const input = option.querySelector('input');
                        input.checked = true;
                        this.answers[this.currentIndex] = input.value;
                    });
                });
                
                if (this.currentIndex > 0) {
                    document.getElementById('prev-question-btn').addEventListener('click', () => this.previous());
                }
                
                if (this.currentIndex < this.questions.length - 1) {
                    document.getElementById('next-question-btn').addEventListener('click', () => this.next());
                } else {
                    document.getElementById('finish-questions-btn').addEventListener('click', () => this.finish());
                }
            }

            attachMultiSelectListeners() {
                const checkboxes = this.container.querySelectorAll('.multi-select-option input[type="checkbox"]');
                const selectedItemsDiv = document.getElementById('selected-items');
                
                checkboxes.forEach(checkbox => {
                    checkbox.addEventListener('change', () => {
                        const checkedOptions = Array.from(checkboxes)
                            .filter(cb => cb.checked)
                            .map(cb => cb.value);
                        
                        this.answers[this.currentIndex] = checkedOptions;
                        
                        if (checkedOptions.length > 0) {
                            selectedItemsDiv.innerHTML = checkedOptions.map(opt => 
                                `<span class="selected-item">${opt}</span>`
                            ).join('');
                        } else {
                            selectedItemsDiv.innerHTML = 'No items selected';
                        }
                    });
                });
                
                if (this.currentIndex > 0) {
                    document.getElementById('prev-question-btn').addEventListener('click', () => this.previous());
                }
                
                if (this.currentIndex < this.questions.length - 1) {
                    document.getElementById('next-question-btn').addEventListener('click', () => this.next());
                } else {
                    document.getElementById('finish-questions-btn').addEventListener('click', () => this.finish());
                }
            }

            next() {
                this.currentIndex++;
                this.renderCurrentQuestion();
            }

            previous() {
                this.currentIndex--;
                this.renderCurrentQuestion();
            }

            finish() {
                // Check if all questions have answers
                const allAnswered = this.answers.every((answer, index) => {
                    if (this.questions[index].isMultiSelect) {
                        return Array.isArray(answer) && answer.length > 0;
                    }
                    return answer && answer.trim() !== '';
                });
                
                if (!allAnswered) {
                    showNotification('Please answer all questions before proceeding', 'error');
                    return;
                }
                
                this.finishBtn.disabled = false;
                showNotification('All questions answered. You can now generate your content!');
                if (this.onFinish) this.onFinish(this.answers);
            }
        }

        // Initialize Three.js Background
        function initThreeBackground() {
            const container = document.getElementById('three-background');
            
            const scene = new THREE.Scene();
            const camera = new THREE.PerspectiveCamera(75, window.innerWidth / window.innerHeight, 0.1, 1000);
            camera.position.z = 5;
            
            const renderer = new THREE.WebGLRenderer({ alpha: true });
            renderer.setSize(window.innerWidth, window.innerHeight);
            renderer.setClearColor(0x000000, 0);
            container.appendChild(renderer.domElement);
            
            const particlesGeometry = new THREE.BufferGeometry();
            const particlesCount = 500;
            const posArray = new Float32Array(particlesCount * 3);
            
            for(let i = 0; i < particlesCount * 3; i++) {
                posArray[i] = (Math.random() - 0.5) * 10;
            }
            
            particlesGeometry.setAttribute('position', new THREE.BufferAttribute(posArray, 3));
            
            const particlesMaterial = new THREE.PointsMaterial({
                size: 0.02,
                color: 0x3498db,
                transparent: true,
                opacity: 0.8
            });
            
            const particlesMesh = new THREE.Points(particlesGeometry, particlesMaterial);
            scene.add(particlesMesh);
            
            const ambientLight = new THREE.AmbientLight(0xffffff, 0.5);
            scene.add(ambientLight);
            
            function animate() {
                requestAnimationFrame(animate);
                particlesMesh.rotation.x += 0.001;
                particlesMesh.rotation.y += 0.002;
                renderer.render(scene, camera);
            }
            
            animate();
            
            window.addEventListener('resize', () => {
                camera.aspect = window.innerWidth / window.innerHeight;
                camera.updateProjectionMatrix();
                renderer.setSize(window.innerWidth, window.innerHeight);
            });
        }

        // Utility Functions
        function showSection(sectionName) {
            Object.values(sections).forEach(section => {
                section.classList.remove('active');
            });
            sections[sectionName].classList.add('active');
        }

        function showNotification(message, type = 'success') {
            elements.notification.textContent = message;
            elements.notification.className = `notification ${type}`;
            elements.notification.classList.add('show');
            
            setTimeout(() => {
                elements.notification.classList.remove('show');
            }, 3000);
        }

        function parseAIResponse(response) {
            try {
                // Try direct parsing first
                return JSON.parse(response);
            } catch (e) {
                // Try to extract JSON from markdown
                const jsonMatch = response.match(/```(?:json)?\n([\s\S]*?)\n```/);
                if (jsonMatch) {
                    try {
                        return JSON.parse(jsonMatch[1]);
                    } catch (e2) {
                        // Continue to next method
                    }
                }
                
                // Try to find JSON object
                const objectMatch = response.match(/\{[\s\S]*\}/);
                if (objectMatch) {
                    try {
                        return JSON.parse(objectMatch[0]);
                    } catch (e3) {
                        // Continue to next method
                    }
                }
                
                // Try to extract JSON array
                const arrayMatch = response.match(/\[[\s\S]*\]/);
                if (arrayMatch) {
                    try {
                        return JSON.parse(arrayMatch[0]);
                    } catch (e4) {
                        // Continue to error
                    }
                }
                
                throw new Error('Invalid response format');
            }
        }

        // API Functions
        async function callGeminiAPI(prompt) {
            try {
                if (!appState.user.apiKey || appState.user.apiKey.length < 20) {
                    throw new Error('Invalid or missing API key');
                }

                const response = await fetch(`${GEMINI_API_ENDPOINT}?key=${appState.user.apiKey}`, {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({
                        contents: [{ parts: [{ text: prompt }] }],
                        generationConfig: {
                            temperature: 0.7,
                            topK: 40,
                            topP: 0.95,
                            maxOutputTokens: 8192
                        }
                    })
                });

                if (!response.ok) {
                    const errorData = await response.json().catch(() => ({}));
                    const errorMessage = errorData.error?.message || `HTTP ${response.status}: ${response.statusText}`;
                    
                    if (response.status === 400) {
                        if (errorMessage.includes('API key')) {
                            throw new Error('Invalid API key');
                        } else if (errorMessage.includes('quota')) {
                            throw new Error('API quota exceeded');
                        }
                    } else if (response.status === 403) {
                        throw new Error('Access forbidden');
                    } else if (response.status === 429) {
                        throw new Error('Too many requests');
                    }
                    
                    throw new Error(errorMessage);
                }

                const data = await response.json();
                
                if (!data.candidates || !data.candidates[0] || !data.candidates[0].content) {
                    throw new Error('Invalid response format');
                }

                return data.candidates[0].content.parts[0].text;
            } catch (error) {
                console.error('Gemini API Error:', error);
                if (error.name === 'TypeError' && error.message.includes('fetch')) {
                    throw new Error('Network error. Please check your internet connection');
                }
                throw error;
            }
        }

        // Initialize Application
        function initApp() {
            elements.continueToApp.addEventListener('click', () => {
                elements.splashScreen.style.opacity = '0';
                setTimeout(() => {
                    elements.splashScreen.style.display = 'none';
                    initThreeBackground();
                    
                    const hasSeenTutorial = localStorage.getItem('hasSeenTutorial');
                    if (hasSeenTutorial) {
                        const savedApiKey = localStorage.getItem('geminiApiKey');
                        if (savedApiKey) {
                            appState.user.apiKey = savedApiKey;
                            elements.apiKeyInput.value = savedApiKey;
                            showSection('mainOptions');
                            loadHistory();
                        } else {
                            showSection('apiKey');
                        }
                    } else {
                        showSection('tutorial');
                    }
                }, 1000);
            });

            // Event Listeners
            elements.saveApiKeyBtn.addEventListener('click', saveApiKey);
            elements.generateQuestionsBtn.addEventListener('click', () => generateClassificationQuestions('presentation'));
            elements.generatePresentationBtn.addEventListener('click', generatePresentation);
            elements.previewBtn.addEventListener('click', () => previewContent(appState.presentation.generatedContent));
            elements.newPresentationBtn.addEventListener('click', () => resetForNew('presentation'));
            elements.clearHistoryBtn.addEventListener('click', clearHistory);
            elements.newCreationFromHistoryBtn.addEventListener('click', () => showSection('mainOptions'));
            elements.historyToggle.addEventListener('click', () => {
                if (sections.history.classList.contains('active')) {
                    showSection('mainOptions');
                } else {
                    loadHistory();
                    showSection('history');
                }
            });

            // Tutorial navigation
            elements.gotItBtn.addEventListener('click', () => {
                localStorage.setItem('hasSeenTutorial', 'true');
                showSection('apiKey');
            });

            elements.showTutorialBtn.addEventListener('click', () => {
                showSection('tutorial');
            });
            
            // Main options navigation
            elements.createPptCard.addEventListener('click', () => {
                appState.project.type = 'presentation';
                showSection('topic');
            });
            
            elements.createReportCard.addEventListener('click', () => {
                appState.project.type = 'report';
                showSection('reportTopic');
            });
            
            elements.createAssignmentCard.addEventListener('click', () => {
                appState.project.type = 'assignment';
                showSection('assignmentTopic');
            });
            
            elements.createProjectCard.addEventListener('click', () => {
                appState.project.type = 'project';
                showSection('projectTopic');
            });
            
            // Report flow event listeners
            elements.generateClassificationQuestionsBtn.addEventListener('click', () => generateClassificationQuestions('report'));
            elements.generateReportBtn.addEventListener('click', generateReport);
            elements.previewReportBtn.addEventListener('click', () => previewContent(appState.report.generatedContent));
            elements.downloadReportBtn.addEventListener('click', downloadAsPDF);
            elements.newReportBtn.addEventListener('click', () => resetForNew('report'));
            
            // Assignment flow event listeners
            elements.generateAssignmentClassificationQuestionsBtn.addEventListener('click', () => generateClassificationQuestions('assignment'));
            elements.generateAssignmentBtn.addEventListener('click', generateAssignment);
            elements.previewAssignmentBtn.addEventListener('click', () => previewContent(appState.assignment.generatedContent));
            elements.downloadAssignmentBtn.addEventListener('click', downloadAsPDF);
            elements.newAssignmentBtn.addEventListener('click', () => resetForNew('assignment'));
            
            // Project flow event listeners
            elements.generateProjectClassificationQuestionsBtn.addEventListener('click', () => generateClassificationQuestions('project'));
            elements.generateProjectBtn.addEventListener('click', generateProject);
            elements.downloadProjectBtn.addEventListener('click', downloadProject);
            elements.previewDocumentationBtn.addEventListener('click', () => previewContent(appState.projectDetails.generatedContent.documentation));
            elements.newProjectBtn.addEventListener('click', () => resetForNew('project'));
        }

        // API Key Management
        function saveApiKey() {
            const apiKey = elements.apiKeyInput.value.trim();
            if (!apiKey) {
                showNotification('Please enter a valid API key', 'error');
                return;
            }

            if (!apiKey.startsWith('AIza') || apiKey.length < 20) {
                showNotification('Invalid API key format', 'error');
                return;
            }

            appState.user.apiKey = apiKey;
            localStorage.setItem('geminiApiKey', apiKey);
            elements.apiStatus.textContent = 'API Key saved successfully!';
            elements.apiStatus.style.color = '#3498db';
            
            showSection('loading');
            setTimeout(() => {
                showSection('mainOptions');
                loadHistory();
            }, 3000);
        }

        // Generate Classification Questions
        async function generateClassificationQuestions(type) {
            const topicInput = type === 'presentation' ? elements.presentationTopic : 
                              type === 'report' ? elements.reportTopicInput :
                              type === 'assignment' ? elements.assignmentTopicInput :
                              elements.projectTopicInput;
            
            const topic = topicInput.value.trim();
            if (!topic) {
                showNotification('Please enter a topic', 'error');
                return;
            }

            appState.project.topic = topic;
            appState.project.type = type;
            
            const generatingSection = type === 'presentation' ? 'generatingPptClassification' :
                                     type === 'report' ? 'generatingClassification' :
                                     type === 'assignment' ? 'generatingAssignmentClassification' :
                                     'generatingProjectClassification';
            
            showSection(generatingSection);
            
            try {
                const prompt = `Generate 3-5 classification questions for a ${type} about "${topic}".
                
Requirements:
- Each question should have 3-4 multiple choice options
- Questions should help understand the user's specific needs
- Return in valid JSON format only

Response format:
{
  "questions": [
    {
      "question": "Question text",
      "options": ["Option 1", "Option 2", "Option 3"]
    }
  ]
}`;
                
                const response = await callGeminiAPI(prompt);
                
                let data;
                try {
                    data = parseAIResponse(response);
                    
                    if (!data.questions || !Array.isArray(data.questions)) {
                        throw new Error('Invalid JSON structure');
                    }
                    
                    data.questions = data.questions.filter(q => 
                        q.question && q.options && Array.isArray(q.options) && q.options.length >= 2
                    );
                    
                    if (data.questions.length === 0) {
                        throw new Error('No valid questions found');
                    }
                    
                    if (data.questions.length > 5) {
                        data.questions = data.questions.slice(0, 5);
                    }
                } catch (parseError) {
                    console.error('Failed to parse AI response:', parseError);
                    data = { questions: FALLBACK_CLASSIFICATION_QUESTIONS[type].slice(0, 5) };
                    showNotification('Using default questions', 'error');
                }
                
                appState.classification.questions = data.questions;
                appState.classification.answers = new Array(data.questions.length).fill('');
                appState.classification.currentIndex = 0;
                
                const section = type === 'presentation' ? 'pptClassificationQuestions' :
                               type === 'report' ? 'classificationQuestions' :
                               type === 'assignment' ? 'assignmentClassificationQuestions' :
                               'projectClassificationQuestions';
                
                showSection(section);
                renderClassificationQuestion(type);
            } catch (error) {
                showNotification(`Error: ${error.message}`, 'error');
                const topicSection = type === 'presentation' ? 'topic' :
                                    type === 'report' ? 'reportTopic' :
                                    type === 'assignment' ? 'assignmentTopic' :
                                    'projectTopic';
                showSection(topicSection);
            }
        }

        // Render Classification Question
        function renderClassificationQuestion(type) {
            const container = type === 'presentation' ? elements.pptClassificationQuestionsContainer :
                             type === 'report' ? elements.classificationQuestionsContainer :
                             type === 'assignment' ? elements.assignmentClassificationQuestionsContainer :
                             elements.projectClassificationQuestionsContainer;
            
            const progressFill = type === 'presentation' ? elements.pptClassificationProgressFill :
                                type === 'report' ? elements.classificationProgressFill :
                                type === 'assignment' ? elements.assignmentClassificationProgressFill :
                                elements.projectClassificationProgressFill;
            
            const finishBtn = type === 'presentation' ? elements.finishPptClassificationBtn :
                             type === 'report' ? elements.finishClassificationBtn :
                             type === 'assignment' ? elements.finishAssignmentClassificationBtn :
                             elements.finishProjectClassificationBtn;
            
            const questionFlow = new QuestionFlow(
                appState.classification.questions,
                container,
                progressFill,
                finishBtn,
                (answers) => {
                    appState.classification.answers = answers;
                    if (type === 'presentation') {
                        generatePresentationQuestions();
                    } else if (type === 'report') {
                        generateReportQuestions();
                    } else if (type === 'assignment') {
                        generateAssignmentQuestions();
                    } else if (type === 'project') {
                        generateProjectQuestions();
                    }
                }
            );
            
            questionFlow.renderCurrentQuestion();
        }

        // Generate Presentation Questions
        function generatePresentationQuestions() {
            const questions = [
                { question: "What language do you want?", options: ["Malayalam", "English", "Other"], variable: "language" },
                { question: "What presentation style?", options: ["Professional Corporate", "Creative Modern", "Minimalist Clean", "Bold Impactful", "Academic Formal"], variable: "presentationStyle" },
                { question: "What theme?", options: ["Minimal", "Creative", "Professional", "HighTech", "Corporate", "Academic", "Modern", "Vintage"], variable: "theme" },
                { question: "How many slides?", options: ["1-4", "1-6", "1-8", "1-10"], variable: "slideCount" },
                { question: "What structure?", options: ["Title and content", "Title and bullet points", "Title, subtitle and content", "Title, subtitle and bullet points", "Two-column layout", "Three-column layout"], variable: "structure" },
                { question: "What animation style?", options: ["Simple transitions", "Advanced animations", "3D animations", "No animation"], variable: "animationStyle" },
                { question: "What 3D elements?", options: ["None", "Basic 3D shapes", "Advanced 3D models", "Interactive 3D elements"], variable: "advancedAnimations" },
                { question: "What interactive elements?", options: ["None", "Basic (click to reveal)", "Advanced (drag, zoom, rotate)", "Interactive quizzes", "Interactive simulations"], variable: "interactiveElements" },
                { question: "Data visualization?", options: ["No", "Basic charts", "Advanced charts", "Interactive charts"], variable: "dataVisualization" },
                { question: "What type of images?", options: ["No images", "Icons only", "SVG graphics only", "Photographs only", "Mix of icons and SVG graphics", "Mix of SVG graphics and photographs", "Mix of all types"], variable: "includeImages" },
                { question: "What color theme?", options: ["Black and white with blue accent", "Black and white with green accent", "Black and white with red accent", "Black and white with purple accent", "Dark theme with blue", "Dark theme with green", "Dark theme with red", "Dark theme with purple", "Light theme with blue", "Light theme with green", "Light theme with red", "Light theme with purple", "Custom color (select two)"], variable: "colorTheme" },
                { question: "Content depth?", options: ["Beginner level", "Intermediate level", "Expert level", "Mixed levels"], variable: "termsdepth" },
                { question: "Which 3D background?", options: ["Stars in Universe", "3D nodes", "3D floating particles", "Abstract shapes", "3D landscape", "3D cityscape", "3D underwater", "3D space nebula", "No background"], variable: "bgitem" }
            ];
            
            const presentationFlow = new QuestionFlow(
                questions,
                elements.questionsContainer,
                elements.progressFill,
                elements.generatePresentationBtn,
                (answers) => {
                    answers.forEach((answer, index) => {
                        const variable = questions[index].variable;
                        appState.presentation[variable] = answer;
                    });
                    elements.generatePresentationBtn.disabled = false;
                    showNotification('Ready to generate presentation!');
                }
            );
            
            presentationFlow.renderCurrentQuestion();
        }

        // Generate Report Questions
        function generateReportQuestions() {
            const questions = [
                { question: "What font size?", options: ["Normal", "Small", "Big"], variable: "fontSize" },
                { question: "What font style?", options: ["Normal", "Handwritten", "Typewriter", "Other"], variable: "font" },
                { question: "What design style?", options: ["Normal", "Advanced designs", "Simple designs"], variable: "style" },
                { question: "What elements?", options: ["SVG", "Icons", "Images"], variable: "elements" }
            ];
            
            const reportFlow = new QuestionFlow(
                questions,
                elements.reportQuestionsContainer,
                elements.reportProgressFill,
                elements.generateReportBtn,
                (answers) => {
                    answers.forEach((answer, index) => {
                        const variable = questions[index].variable;
                        appState.customization[variable] = answer;
                    });
                    elements.generateReportBtn.disabled = false;
                    showNotification('Ready to generate report!');
                }
            );
            
            reportFlow.renderCurrentQuestion();
        }

        // Generate Assignment Questions
        function generateAssignmentQuestions() {
            const questions = [
                { question: "What grade level?", options: ["Elementary (K-5)", "Middle School (6-8)", "High School (9-12)", "College/University"], variable: "gradeLevel" },
                { question: "What type?", options: ["Essay/Research Paper", "Problem Set", "Project-based", "Quiz/Test", "Presentation", "Lab Report"], variable: "type" },
                { question: "How long?", options: ["Short (1-2 pages)", "Medium (3-5 pages)", "Long (6+ pages)"], variable: "length" },
                { question: "What difficulty?", options: ["Beginner", "Intermediate", "Advanced", "Mixed Levels"], variable: "difficulty" },
                { question: "What resources?", options: ["None", "Reading list", "Research guidelines", "Templates", "All of the above"], variable: "resources" },
                { question: "Submission format?", options: ["Written document", "Digital submission", "Presentation", "Physical project", "Online quiz"], variable: "submission" },
                { question: "What font style?", options: ["Normal", "Handwritten", "Typewriter", "Other"], variable: "font" }
            ];
            
            const assignmentFlow = new QuestionFlow(
                questions,
                elements.assignmentQuestionsContainer,
                elements.assignmentProgressFill,
                elements.generateAssignmentBtn,
                (answers) => {
                    answers.forEach((answer, index) => {
                        const variable = questions[index].variable;
                        appState.assignment[variable] = answer;
                    });
                    elements.generateAssignmentBtn.disabled = false;
                    showNotification('Ready to generate assignment!');
                }
            );
            
            assignmentFlow.renderCurrentQuestion();
        }

        // Generate Project Questions
        function generateProjectQuestions() {
            const questions = [
                { question: "What type?", options: ["Web Application", "Mobile App", "Desktop Software", "Data Analysis System", "Machine Learning Model", "IoT Solution"], variable: "type" },
                { question: "What programming languages? (Select multiple)", options: PROGRAMMING_LANGUAGES, variable: "languages", isMultiSelect: true },
                { question: "What framework?", options: ["React", "Angular", "Vue.js", "Django", "Flask", "Spring Boot", "ASP.NET", "Laravel", "Express.js", "No framework"], variable: "framework" },
                { question: "What database?", options: ["MySQL", "PostgreSQL", "MongoDB", "SQLite", "Firebase", "Oracle", "SQL Server", "No database needed"], variable: "database" },
                { question: "What UI/UX approach?", options: ["Modern minimalist", "Colorful and vibrant", "Corporate professional", "Dark theme", "Custom design"], variable: "ui" },
                { question: "What documentation level?", options: ["Basic comments", "Detailed documentation", "Complete with user manual", "Academic level"], variable: "documentation" },
                { question: "Deployment method?", options: ["Local only", "Cloud (AWS/Azure/GCP)", "Docker container", "Traditional server", "No deployment"], variable: "deployment" },
                { question: "Include current date?", options: ["Yes", "No"], variable: "includeCurrentDate" },
                { question: "What font for documentation?", options: ["Normal", "Handwritten", "Typewriter", "Other"], variable: "font" }
            ];
            
            const projectFlow = new QuestionFlow(
                questions,
                elements.projectQuestionsContainer,
                elements.projectProgressFill,
                elements.generateProjectBtn,
                (answers) => {
                    answers.forEach((answer, index) => {
                        const variable = questions[index].variable;
                        if (variable === 'includeCurrentDate') {
                            appState.projectDetails[variable] = answer === "Yes";
                            if (appState.projectDetails[variable]) {
                                appState.projectDetails.currentDateTime = new Date().toLocaleString();
                            }
                        } else {
                            appState.projectDetails[variable] = answer;
                        }
                    });
                    elements.generateProjectBtn.disabled = false;
                    showNotification('Ready to generate project!');
                }
            );
            
            projectFlow.renderCurrentQuestion();
        }

        // Generate Presentation
        async function generatePresentation() {
            elements.generatePresentationBtn.disabled = true;
            elements.generatePresentationBtn.textContent = 'Generating...';
            showSection('generating');
            
            try {
                const { topic, theme, slideCount, structure, animationStyle, colorTheme, customColor1, customColor2, bgitem, termsdepth, includeImages, language, presentationStyle, advancedAnimations, interactiveElements, dataVisualization } = appState.presentation;
                
                const presentationLanguage = language === "Other" ? appState.customization.language : language;
                const colorThemeString = colorTheme === "Custom color (select two)" ? `Custom colors: ${customColor1} and ${customColor2}` : colorTheme;
                
                const classificationInfo = appState.classification.questions.map((q, i) => 
                    `Q: ${q.question}\nA: ${appState.classification.answers[i]}`
                ).join('\n\n');
                
                const prompt = `Create a complete HTML presentation about "${topic}".

Requirements:
- Language: ${presentationLanguage}
- Theme: ${theme}
- Slides: ${slideCount}
- Structure: ${structure}
- Animation: ${animationStyle}
- Colors: ${colorThemeString}
- Background: ${bgitem}
- Content depth: ${termsdepth}
- Images: ${includeImages}
- Style: ${presentationStyle}
- 3D elements: ${advancedAnimations}
- Interactive: ${interactiveElements}
- Data visualization: ${dataVisualization}

Classification info:
 ${classificationInfo}

Features:
1. Fullscreen mode (F key)
2. Arrow key navigation
3. Slide indicators
4. Previous/Next buttons
5. Responsive design
6. Watermark: "Developed under HOPE Research Team | by Justin"

Output complete HTML only.`;
                
                const presentationHTML = await callGeminiAPI(prompt);
                appState.presentation.generatedContent = ensureWatermark(presentationHTML);
                
                saveToHistory(topic, presentationHTML, 'presentation');
                showSection('preview');
            } catch (error) {
                showNotification(`Error: ${error.message}`, 'error');
                elements.generatePresentationBtn.disabled = false;
                elements.generatePresentationBtn.textContent = 'Generate Presentation';
                showSection('questions');
            }
        }

        // Generate Report
        async function generateReport() {
            elements.generateReportBtn.disabled = true;
            elements.generateReportBtn.textContent = 'Generating...';
            showSection('generatingReport');
            
            try {
                const { topic } = appState.project;
                const { fontSize, font, style, elements } = appState.customization;
                
                const classificationInfo = appState.classification.questions.map((q, i) => 
                    `Q: ${q.question}\nA: ${appState.classification.answers[i]}`
                ).join('\n\n');
                
                const prompt = `Create a complete HTML report about "${topic}".

Requirements:
- Font size: ${fontSize}
- Font style: ${font}
- Design style: ${style}
- Elements: ${elements}

Classification info:
 ${classificationInfo}

Features:
1. Print-optimized layout
2. Download button (id="download-pdf-btn")
3. Watermark: "Developed under HOPE Research Team | by Justin"
4. Professional styling

Output complete HTML only.`;
                
                const reportHTML = await callGeminiAPI(prompt);
                appState.report.generatedContent = reportHTML;
                
                saveToHistory(topic, reportHTML, 'report');
                showSection('reportPreview');
            } catch (error) {
                showNotification(`Error: ${error.message}`, 'error');
                elements.generateReportBtn.disabled = false;
                elements.generateReportBtn.textContent = 'Generate Report';
                showSection('reportQuestions');
            }
        }

        // Generate Assignment
        async function generateAssignment() {
            elements.generateAssignmentBtn.disabled = true;
            elements.generateAssignmentBtn.textContent = 'Generating...';
            showSection('generatingAssignment');
            
            try {
                const { topic } = appState.project;
                const { gradeLevel, type, length, difficulty, resources, submission } = appState.assignment;
                const { font } = appState.customization;
                
                const classificationInfo = appState.classification.questions.map((q, i) => 
                    `Q: ${q.question}\nA: ${appState.classification.answers[i]}`
                ).join('\n\n');
                
                const prompt = `Create a complete HTML assignment about "${topic}".

Requirements:
- Grade level: ${gradeLevel}
- Type: ${type}
- Length: ${length}
- Difficulty: ${difficulty}
- Resources: ${resources}
- Submission: ${submission}
- Font: ${font}

Classification info:
 ${classificationInfo}

Features:
1. Print-optimized layout
2. Download button (id="download-pdf-btn")
3. Watermark: "Developed under HOPE Research Team | by Justin"
4. Professional styling

Output complete HTML only.`;
                
                const assignmentHTML = await callGeminiAPI(prompt);
                appState.assignment.generatedContent = assignmentHTML;
                
                saveToHistory(topic, assignmentHTML, 'assignment');
                showSection('assignmentPreview');
            } catch (error) {
                showNotification(`Error: ${error.message}`, 'error');
                elements.generateAssignmentBtn.disabled = false;
                elements.generateAssignmentBtn.textContent = 'Generate Assignment';
                showSection('assignmentQuestions');
            }
        }

        // Generate Project
        async function generateProject() {
            elements.generateProjectBtn.disabled = true;
            elements.generateProjectBtn.textContent = 'Generating...';
            showSection('generatingProject');
            
            try {
                const { topic, level } = appState.project;
                const { type, languages, framework, database, ui, documentation, deployment, includeCurrentDate, currentDateTime } = appState.projectDetails;
                
                const classificationInfo = appState.classification.questions.map((q, i) => 
                    `Q: ${q.question}\nA: ${appState.classification.answers[i]}`
                ).join('\n\n');
                
                const dateInfo = includeCurrentDate ? `Current date: ${currentDateTime}` : '';
                
                // Generate documentation
                const docPrompt = `Create documentation for a ${level} ${type} project about "${topic}".

Requirements:
- Level: ${level}
- Type: ${type}
- Languages: ${Array.isArray(languages) ? languages.join(', ') : languages}
- Framework: ${framework}
- Database: ${database}
- UI: ${ui}
- Documentation: ${documentation}
- Deployment: ${deployment}
- ${dateInfo}

Classification info:
 ${classificationInfo}

Output complete HTML only.`;
                
                const projectDocumentation = await callGeminiAPI(docPrompt);
                
                // Generate README
                const readmePrompt = `Create README.md for a ${level} ${type} project about "${topic}".

Requirements:
- Level: ${level}
- Type: ${type}
- Languages: ${Array.isArray(languages) ? languages.join(', ') : languages}
- Framework: ${framework}
- Database: ${database}
- ${dateInfo}

Output Markdown only.`;
                
                const readme = await callGeminiAPI(readmePrompt);
                
                // Generate workflow SVG
                const workflowPrompt = `Create workflow SVG for a ${level} ${type} project about "${topic}".

Requirements:
- Professional diagram
- Complete project flow
- Modern design

Output SVG only.`;
                
                const workflow = await callGeminiAPI(workflowPrompt);
                
                appState.projectDetails.generatedContent = {
                    documentation: projectDocumentation,
                    readme,
                    workflow,
                    sourceCode: {}
                };
                
                // Generate source code files
                await generateSourceCode();
                
                prepareProjectFileList();
                saveToHistory(topic, appState.projectDetails.generatedContent, 'project');
                showSection('projectPreview');
            } catch (error) {
                showNotification(`Error: ${error.message}`, 'error');
                elements.generateProjectBtn.disabled = false;
                elements.generateProjectBtn.textContent = 'Generate Project';
                showSection('projectQuestions');
            }
        }

        // Generate Source Code
        async function generateSourceCode() {
            const { topic, level, type, languages, framework, database, includeCurrentDate, currentDateTime } = appState.projectDetails;
            
            const dateInfo = includeCurrentDate ? `Current date: ${currentDateTime}` : '';
            
            const mainFilePrompt = `Create main application file for a ${level} ${type} about "${topic}" using ${Array.isArray(languages) ? languages.join(', ') : languages} and ${framework}.

Requirements:
- Fully functional
- Proper error handling
- Comments
- Best practices
- Connect to ${database} if applicable
- Core features for "${topic}"
- Suitable for ${level} project
- ${dateInfo}

Output complete source code only.`;
            
            let mainFileExtension = getFileExtension(Array.isArray(languages) ? languages[0] : languages);
            let mainFileName = `index.${mainFileExtension}`;
            
            if (type === "Web Application") {
                mainFileName = "index.html";
                const mainFileContent = await callGeminiAPI(mainFilePrompt);
                appState.projectDetails.generatedContent.sourceCode[mainFileName] = mainFileContent;
                
                // Generate CSS
                const cssPrompt = `Create CSS for a ${level} ${type} about "${topic}" with modern styling.

Output CSS only.`;
                appState.projectDetails.generatedContent.sourceCode["styles.css"] = await callGeminiAPI(cssPrompt);
                
                // Generate JavaScript
                const jsPrompt = `Create JavaScript for a ${level} ${type} about "${topic}".

Output JavaScript only.`;
                appState.projectDetails.generatedContent.sourceCode["script.js"] = await callGeminiAPI(jsPrompt);
            } else {
                const mainFileContent = await callGeminiAPI(mainFilePrompt);
                appState.projectDetails.generatedContent.sourceCode[mainFileName] = mainFileContent;
            }
            
            // Generate package.json if needed
            if (languages.includes("JavaScript/TypeScript") || ["React", "Angular", "Vue.js", "Express.js"].includes(framework)) {
                const packagePrompt = `Create package.json for a ${level} ${type} about "${topic}" using ${framework}.

Output JSON only.`;
                appState.projectDetails.generatedContent.sourceCode["package.json"] = await callGeminiAPI(packagePrompt);
            }
            
            // Generate database config if needed
            if (database !== "No database needed") {
                const dbPrompt = `Create database config for a ${level} ${type} about "${topic}" using ${database}.

Output config only.`;
                
                let dbFileName = `db-config.${getFileExtension(Array.isArray(languages) ? languages[0] : languages)}`;
                appState.projectDetails.generatedContent.sourceCode[dbFileName] = await callGeminiAPI(dbPrompt);
            }
            
            appState.projectDetails.generatedContent.sourceCode["README.md"] = appState.projectDetails.generatedContent.readme;
        }

        // Helper Functions
        function getFileExtension(language) {
            const extensions = {
                "JavaScript/TypeScript": "js",
                "Python": "py",
                "Java": "java",
                "C#": "cs",
                "PHP": "php",
                "Ruby": "rb",
                "Go": "go",
                "Swift": "swift",
                "Kotlin": "kt",
                "C++": "cpp",
                "C": "c",
                "Rust": "rs",
                "SQL": "sql",
                "HTML/CSS": "html"
            };
            
            return extensions[language] || "txt";
        }

        function ensureWatermark(html) {
            if (html.includes('Developed under HOPE Research Team') && html.includes('By Justin')) {
                return html;
            }
            
            const slidePattern = /<div class="slide-content">(.*?)<\/div>/gs;
            const watermark = '<div class="watermark">Developed under HOPE Research Team<br> by Justin</div>';
            
            return html.replace(slidePattern, (match, content) => {
                if (!content.includes('watermark')) {
                    return `<div class="slide-content">${content}${watermark}</div>`;
                }
                return match;
            });
        }

        function previewContent(content) {
            const newWindow = window.open();
            newWindow.document.write(content);
            newWindow.document.close();
        }

        function downloadAsPDF() {
            window.print();
        }

        function prepareProjectFileList() {
            const fileList = [];
            
            fileList.push({
                name: "Documentation.html",
                size: "~" + Math.round(appState.projectDetails.generatedContent.documentation.length / 1024) + " KB",
                type: "documentation"
            });
            
            fileList.push({
                name: "README.md",
                size: "~" + Math.round(appState.projectDetails.generatedContent.readme.length / 1024) + " KB",
                type: "readme"
            });
            
            fileList.push({
                name: "Workflow.svg",
                size: "~" + Math.round(appState.projectDetails.generatedContent.workflow.length / 1024) + " KB",
                type: "workflow"
            });
            
            for (const [fileName, content] of Object.entries(appState.projectDetails.generatedContent.sourceCode)) {
                fileList.push({
                    name: fileName,
                    size: "~" + Math.round(content.length / 1024) + " KB",
                    type: "source"
                });
            }
            
            elements.projectFileList.innerHTML = fileList.map(file => `
                <div class="file-item">
                    <div class="file-name">${file.name}</div>
                    <div class="file-size">${file.size}</div>
                </div>
            `).join('');
        }

        async function downloadProject() {
            try {
                const zip = new JSZip();
                const projectFolder = zip.folder(appState.project.topic.replace(/\s+/g, '_'));
                
                projectFolder.file("Documentation.html", appState.projectDetails.generatedContent.documentation);
                projectFolder.file("README.md", appState.projectDetails.generatedContent.readme);
                projectFolder.file("Workflow.svg", appState.projectDetails.generatedContent.workflow);
                
                const sourceFolder = projectFolder.folder("Source_Code");
                for (const [fileName, content] of Object.entries(appState.projectDetails.generatedContent.sourceCode)) {
                    sourceFolder.file(fileName, content);
                }
                
                const content = await zip.generateAsync({type: "blob"});
                saveAs(content, `${appState.project.topic.replace(/\s+/g, '_')}_Project.zip`);
                
                showNotification('Project downloaded successfully!');
            } catch (error) {
                showNotification(`Error: ${error.message}`, 'error');
            }
        }

        function resetForNew(type) {
            if (type === 'presentation') {
                appState.presentation = {
                    animationStyle: '',
                    colorTheme: '',
                    customColor1: '#3498db',
                    customColor2: '#e74c3c',
                    bgitem: '',
                    structure: '',
                    presentationStyle: '',
                    advancedAnimations: '',
                    interactiveElements: '',
                    dataVisualization: '',
                    includeImages: '',
                    generatedContent: ''
                };
                elements.presentationTopic.value = '';
                showSection('topic');
            } else if (type === 'report') {
                appState.report.generatedContent = '';
                elements.reportTopicInput.value = '';
                showSection('reportTopic');
            } else if (type === 'assignment') {
                appState.assignment = {
                    gradeLevel: '',
                    type: '',
                    length: '',
                    difficulty: '',
                    resources: '',
                    submission: '',
                    generatedContent: ''
                };
                elements.assignmentTopicInput.value = '';
                showSection('assignmentTopic');
            } else if (type === 'project') {
                appState.projectDetails = {
                    type: '',
                    languages: [],
                    framework: '',
                    database: '',
                    ui: '',
                    documentation: '',
                    deployment: '',
                    generatedContent: {},
                    includeCurrentDate: false,
                    currentDateTime: ''
                };
                elements.projectTopicInput.value = '';
                elements.projectLevelSelect.value = '';
                showSection('projectTopic');
            }
            
            appState.classification = {
                questions: [],
                answers: [],
                currentIndex: 0
            };
        }

        // History Management
        function saveToHistory(topic, content, type) {
            const historyItem = {
                id: Date.now(),
                topic: topic,
                type: type,
                timestamp: new Date().toISOString(),
                content: content
            };
            
            if (type === 'presentation') {
                appState.history.presentations.unshift(historyItem);
                if (appState.history.presentations.length > 10) {
                    appState.history.presentations = appState.history.presentations.slice(0, 10);
                }
                localStorage.setItem('presentationHistory', JSON.stringify(appState.history.presentations));
            } else if (type === 'report') {
                appState.history.reports.unshift(historyItem);
                if (appState.history.reports.length > 10) {
                    appState.history.reports = appState.history.reports.slice(0, 10);
                }
                localStorage.setItem('reportHistory', JSON.stringify(appState.history.reports));
            } else if (type === 'assignment') {
                appState.history.assignments.unshift(historyItem);
                if (appState.history.assignments.length > 10) {
                    appState.history.assignments = appState.history.assignments.slice(0, 10);
                }
                localStorage.setItem('assignmentHistory', JSON.stringify(appState.history.assignments));
            } else if (type === 'project') {
                appState.history.projects.unshift(historyItem);
                if (appState.history.projects.length > 10) {
                    appState.history.projects = appState.history.projects.slice(0, 10);
                }
                localStorage.setItem('projectHistory', JSON.stringify(appState.history.projects));
            }
            
            loadHistory();
        }

        function loadHistory() {
            const savedPresentationHistory = localStorage.getItem('presentationHistory');
            const savedReportHistory = localStorage.getItem('reportHistory');
            const savedAssignmentHistory = localStorage.getItem('assignmentHistory');
            const savedProjectHistory = localStorage.getItem('projectHistory');
            
            if (savedPresentationHistory) {
                appState.history.presentations = JSON.parse(savedPresentationHistory);
            }
            
            if (savedReportHistory) {
                appState.history.reports = JSON.parse(savedReportHistory);
            }
            
            if (savedAssignmentHistory) {
                appState.history.assignments = JSON.parse(savedAssignmentHistory);
            }
            
            if (savedProjectHistory) {
                appState.history.projects = JSON.parse(savedProjectHistory);
            }
            
            renderHistory();
        }

        function renderHistory() {
            const allHistory = [
                ...appState.history.presentations.map(item => ({...item, type: 'presentation'})),
                ...appState.history.reports.map(item => ({...item, type: 'report'})),
                ...appState.history.assignments.map(item => ({...item, type: 'assignment'})),
                ...appState.history.projects.map(item => ({...item, type: 'project'}))
            ].sort((a, b) => new Date(b.timestamp) - new Date(a.timestamp));
            
            if (allHistory.length === 0) {
                elements.historyContainer.innerHTML = '<p>No history yet.</p>';
                return;
            }
            
            elements.historyContainer.innerHTML = allHistory.map(item => `
                <div class="history-item">
                    <div>
                        <h3>${item.topic} <span style="font-size: 0.8rem; opacity: 0.7;">(${item.type})</span></h3>
                        <p>${new Date(item.timestamp).toLocaleString()}</p>
                    </div>
                    <div>
                        <button onclick="loadFromHistory(${item.id}, '${item.type}')">Load</button>
                        <button onclick="deleteHistoryItem(${item.id}, '${item.type}')">Delete</button>
                    </div>
                </div>
            `).join('');
        }

        function loadFromHistory(id, type) {
            let item;
            if (type === 'presentation') {
                item = appState.history.presentations.find(item => item.id === id);
                if (item) {
                    appState.presentation.generatedContent = item.content;
                    appState.project.topic = item.topic;
                    showSection('preview');
                }
            } else if (type === 'report') {
                item = appState.history.reports.find(item => item.id === id);
                if (item) {
                    appState.report.generatedContent = item.content;
                    appState.project.topic = item.topic;
                    showSection('reportPreview');
                }
            } else if (type === 'assignment') {
                item = appState.history.assignments.find(item => item.id === id);
                if (item) {
                    appState.assignment.generatedContent = item.content;
                    appState.project.topic = item.topic;
                    showSection('assignmentPreview');
                }
            } else if (type === 'project') {
                item = appState.history.projects.find(item => item.id === id);
                if (item) {
                    appState.projectDetails.generatedContent = item.content;
                    appState.project.topic = item.topic;
                    prepareProjectFileList();
                    showSection('projectPreview');
                }
            }
        }

        function deleteHistoryItem(id, type) {
            if (type === 'presentation') {
                appState.history.presentations = appState.history.presentations.filter(item => item.id !== id);
                localStorage.setItem('presentationHistory', JSON.stringify(appState.history.presentations));
            } else if (type === 'report') {
                appState.history.reports = appState.history.reports.filter(item => item.id !== id);
                localStorage.setItem('reportHistory', JSON.stringify(appState.history.reports));
            } else if (type === 'assignment') {
                appState.history.assignments = appState.history.assignments.filter(item => item.id !== id);
                localStorage.setItem('assignmentHistory', JSON.stringify(appState.history.assignments));
            } else if (type === 'project') {
                appState.history.projects = appState.history.projects.filter(item => item.id !== id);
                localStorage.setItem('projectHistory', JSON.stringify(appState.history.projects));
            }
            loadHistory();
            showNotification('Item removed from history');
        }

        function clearHistory() {
            if (confirm('Are you sure you want to clear all history?')) {
                appState.history = {
                    presentations: [],
                    reports: [],
                    assignments: [],
                    projects: []
                };
                localStorage.removeItem('presentationHistory');
                localStorage.removeItem('reportHistory');
                localStorage.removeItem('assignmentHistory');
                localStorage.removeItem('projectHistory');
                renderHistory();
                showNotification('History cleared');
            }
        }

        // Initialize the application when DOM is loaded
        document.addEventListener('DOMContentLoaded', initApp);
    </script>
</body>
</html>