<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>HOPE-INT-CORE | AI-Powered Content Generator</title>
    
    <!-- Meta Tags -->
    <meta name="description" content="Create stunning presentations, reports, assignments, and projects with AI">
    <meta name="keywords" content="AI generator, presentations, reports, assignments, projects">
    <meta name="author" content="Justin">
    
    <!-- Open Graph Tags -->
    <meta property="og:title" content="HOPE-INT-CORE | AI-Powered Content Generator">
    <meta property="og:description" content="Create stunning presentations, reports, assignments, and projects with AI">
    <meta property="og:image" content="https://i.ibb.co/3yMXpZ71/Whats-App-Image-2025-09-29-at-12-03-39-AM.jpg">
    <meta property="og:url" content="https://HOPE-INT-CORE.vercel.app">
    
    <!-- Favicon -->
    <link rel="icon" type="image/x-icon" href="/favicon.ico">
    
    <!-- External Scripts -->
    <script src="https://unpkg.com/@lottiefiles/lottie-player@latest/dist/lottie-player.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/three.js/r128/three.min.js"></script>
    
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
        }

        body {
            background: linear-gradient(135deg, #000000, #1a1a2e);
            color: #ffffff;
            min-height: 100vh;
            display: flex;
            flex-direction: column;
            align-items: center;
            padding: 20px;
            position: relative;
            overflow-x: hidden;
        }

        #three-background {
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            z-index: -1;
        }

        .container {
            width: 100%;
            max-width: 800px;
            margin: 0 auto;
            background: rgba(255, 255, 255, 0.05);
            backdrop-filter: blur(15px);
            border-radius: 20px;
            padding: 30px;
            box-shadow: 0 8px 32px rgba(0, 0, 0, 0.3);
            border: 1px solid rgba(255, 255, 255, 0.1);
            margin-bottom: 80px;
        }

        h1 {
            text-align: center;
            margin-bottom: 30px;
            font-size: 2.5rem;
            text-shadow: 0 2px 10px rgba(0, 0, 0, 0.5);
            background: linear-gradient(45deg, #3498db, #ffffff);
            -webkit-background-clip: text;
            -webkit-text-fill-color: transparent;
            background-clip: text;
        }

        .section {
            display: none;
            animation: fadeIn 0.5s ease-in-out;
        }

        .section.active {
            display: block;
        }

        @keyframes fadeIn {
            from { opacity: 0; transform: translateY(20px); }
            to { opacity: 1; transform: translateY(0); }
        }

        .form-group {
            margin-bottom: 20px;
        }

        label {
            display: block;
            margin-bottom: 8px;
            font-weight: 600;
            color: rgba(255, 255, 255, 0.9);
        }

        input, textarea, select {
            width: 100%;
            padding: 12px;
            border: none;
            border-radius: 12px;
            background: rgba(255, 255, 255, 0.1);
            color: #fff;
            font-size: 16px;
            backdrop-filter: blur(5px);
            border: 1px solid rgba(52, 152, 219, 0.3);
            transition: all 0.3s ease;
        }

        input:focus, textarea:focus, select:focus {
            outline: none;
            background: rgba(255, 255, 255, 0.15);
            box-shadow: 0 0 15px rgba(52, 152, 219, 0.4);
            border-color: rgba(52, 152, 219, 0.6);
        }

        input::placeholder, textarea::placeholder {
            color: rgba(255, 255, 255, 0.6);
        }

        button {
            background: linear-gradient(45deg, #3498db, #2980b9);
            color: white;
            border: none;
            padding: 12px 24px;
            border-radius: 12px;
            cursor: pointer;
            font-size: 16px;
            font-weight: 600;
            transition: all 0.3s ease;
            margin-right: 10px;
            margin-top: 10px;
            backdrop-filter: blur(5px);
            border: 1px solid rgba(255, 255, 255, 0.1);
            box-shadow: 0 4px 15px rgba(52, 152, 219, 0.3);
        }

        button:hover {
            transform: translateY(-2px);
            box-shadow: 0 6px 20px rgba(52, 152, 219, 0.4);
            background: linear-gradient(45deg, #2980b9, #3498db);
        }

        button:disabled {
            opacity: 0.6;
            cursor: not-allowed;
            transform: none;
        }

        /* Splash Screen Styles */
        .splash-screen {
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background: linear-gradient(135deg, #000000, #1a1a2e);
            display: flex;
            flex-direction: column;
            justify-content: center;
            align-items: center;
            z-index: 10000;
            transition: opacity 1s ease;
        }

        .splash-content {
            text-align: center;
            max-width: 600px;
            padding: 40px;
        }

        .splash-title {
            font-size: 3rem;
            margin-bottom: 20px;
            background: linear-gradient(45deg, #3498db, #ffffff);
            -webkit-background-clip: text;
            -webkit-text-fill-color: transparent;
            background-clip: text;
        }

        .splash-subtitle {
            font-size: 1.5rem;
            margin-bottom: 30px;
            color: rgba(255, 255, 255, 0.8);
        }

        .splash-animation {
            width: 300px;
            height: 300px;
            margin: 20px auto;
        }

        .splash-footer {
            margin-top: 40px;
            padding: 20px;
            background: rgba(255, 255, 255, 0.05);
            backdrop-filter: blur(10px);
            border-radius: 15px;
            border: 1px solid rgba(52, 152, 219, 0.3);
        }

        .splash-continue {
            margin-top: 30px;
            padding: 12px 30px;
            font-size: 1.1rem;
            background: linear-gradient(45deg, #3498db, #2980b9);
            border: none;
            color: white;
            border-radius: 30px;
            cursor: pointer;
            transition: all 0.3s ease;
        }

        .splash-continue:hover {
            transform: translateY(-3px);
            box-shadow: 0 10px 25px rgba(52, 152, 219, 0.4);
        }

        /* Tutorial Section Styles */
        .tutorial-section {
            max-width: 800px;
            margin: 0 auto;
            padding: 30px;
        }

        .tutorial-header {
            text-align: center;
            margin-bottom: 40px;
        }

        .tutorial-header h2 {
            font-size: 2.5rem;
            margin-bottom: 15px;
            background: linear-gradient(45deg, #3498db, #ffffff);
            -webkit-background-clip: text;
            -webkit-text-fill-color: transparent;
            background-clip: text;
        }

        .tutorial-header p {
            font-size: 1.2rem;
            color: rgba(255, 255, 255, 0.8);
        }

        .tutorial-steps {
            display: flex;
            flex-direction: column;
            gap: 30px;
        }

        .tutorial-step {
            background: rgba(255, 255, 255, 0.08);
            backdrop-filter: blur(10px);
            border-radius: 15px;
            padding: 25px;
            border: 1px solid rgba(52, 152, 219, 0.3);
            box-shadow: 0 8px 32px rgba(0, 0, 0, 0.2);
        }

        .step-number {
            display: inline-block;
            width: 40px;
            height: 40px;
            background: linear-gradient(45deg, #3498db, #2980b9);
            border-radius: 50%;
            text-align: center;
            line-height: 40px;
            font-weight: bold;
            margin-bottom: 15px;
        }

        .step-content h3 {
            font-size: 1.5rem;
            margin-bottom: 15px;
            color: #3498db;
        }

        .step-content p {
            margin-bottom: 15px;
            line-height: 1.6;
            color: rgba(255, 255, 255, 0.9);
        }

        .step-content ul {
            margin-left: 20px;
            margin-bottom: 15px;
        }

        .step-content li {
            margin-bottom: 8px;
            color: rgba(255, 255, 255, 0.9);
        }

        .step-image {
            width: 100%;
            max-width: 600px;
            height: auto;
            border-radius: 10px;
            margin: 15px auto;
            display: block;
            border: 2px solid rgba(52, 152, 219, 0.3);
        }

        .tutorial-actions {
            text-align: center;
            margin-top: 40px;
        }

        .tutorial-note {
            background: rgba(52, 152, 219, 0.2);
            border-left: 4px solid #3498db;
            padding: 15px;
            border-radius: 8px;
            margin: 20px 0;
        }

        .tutorial-note p {
            margin: 0;
            color: rgba(255, 255, 255, 0.9);
        }

        /* Main Options Styles */
        .main-options {
            display: flex;
            flex-direction: column;
            gap: 20px;
            margin-top: 30px;
        }
        
        .option-card {
            background: rgba(255, 255, 255, 0.08);
            backdrop-filter: blur(10px);
            border-radius: 15px;
            padding: 25px;
            border: 1px solid rgba(52, 152, 219, 0.3);
            box-shadow: 0 8px 32px rgba(0, 0, 0, 0.2);
            cursor: pointer;
            transition: all 0.3s ease;
        }
        
        .option-card:hover {
            transform: translateY(-5px);
            box-shadow: 0 12px 40px rgba(52, 152, 219, 0.4);
            border-color: rgba(52, 152, 219, 0.6);
        }
        
        .option-card h3 {
            font-size: 1.5rem;
            margin-bottom: 10px;
            color: #3498db;
        }
        
        .option-card p {
            color: rgba(255, 255, 255, 0.8);
        }

        /* Loading Screen */
        .loading-screen {
            display: flex;
            flex-direction: column;
            align-items: center;
            justify-content: center;
            height: 60vh;
        }

        .loading-text {
            font-size: 2rem;
            margin-bottom: 20px;
            animation: pulse 1.5s infinite;
            text-align: center;
            color: #3498db;
        }

        .loading-credit {
            font-size: 1.2rem;
            margin-top: 10px;
            opacity: 0;
            animation: fadeIn 1s forwards;
            animation-delay: 0.5s;
            color: rgba(255, 255, 255, 0.8);
        }

        .loading-credit:nth-child(3) {
            animation-delay: 1s;
        }

        @keyframes pulse {
            0% { opacity: 0.6; }
            50% { opacity: 1; }
            100% { opacity: 0.6; }
        }

        .lottie-container {
            width: 200px;
            height: 200px;
            margin: 20px 0;
        }

        /* Notification */
        .notification {
            position: fixed;
            top: 20px;
            right: 20px;
            background: rgba(52, 152, 219, 0.9);
            backdrop-filter: blur(10px);
            color: white;
            padding: 15px 20px;
            border-radius: 12px;
            box-shadow: 0 4px 12px rgba(0, 0, 0, 0.3);
            transform: translateX(120%);
            transition: transform 0.3s ease;
            z-index: 1000;
            border: 1px solid rgba(255, 255, 255, 0.2);
        }

        .notification.show {
            transform: translateX(0);
        }

        .notification.error {
            background: rgba(231, 76, 60, 0.9);
        }

        /* Footer */
        footer {
            position: fixed;
            bottom: 0;
            left: 0;
            width: 100%;
            background: rgba(0, 0, 0, 0.5);
            backdrop-filter: blur(15px);
            padding: 15px;
            text-align: center;
            color: rgba(255, 255, 255, 0.8);
            font-size: 0.9rem;
            border-top: 1px solid rgba(52, 152, 219, 0.3);
            z-index: 100;
        }

        /* Responsive */
        @media (max-width: 768px) {
            .container {
                padding: 20px;
            }
            
            h1 {
                font-size: 2rem;
            }
            
            button {
                width: 100%;
                margin-right: 0;
            }
            
            .splash-title {
                font-size: 2.5rem;
            }
            
            .splash-subtitle {
                font-size: 1.2rem;
            }

            .tutorial-header h2 {
                font-size: 2rem;
            }

            .step-content h3 {
                font-size: 1.3rem;
            }
        }
    </style>
</head>
<body>
    <!-- Splash Screen -->
    <div id="splash-screen" class="splash-screen">
        <div class="splash-content">
            <h1 class="splash-title">HOPE-INT-CORE</h1>
            <p class="splash-subtitle">Create stunning presentations, printable reports, assignments, and complete projects with AI</p>
            <div class="splash-animation">
                <lottie-player src="https://assets4.lottiefiles.com/packages/lf20_DMgKk1.json" background="transparent" speed="1" loop autoplay></lottie-player>
            </div>
            <div class="splash-footer">
                <p>Developed by Justin</p>
                <p>Under HOPE Research & development Team</p>
            </div>
            <button class="splash-continue" id="continue-to-app">Continue to App</button>
        </div>
    </div>

    <div id="three-background"></div>
    
    <div class="container">
        <h1>HOPE-INT-CORE</h1>
        
        <!-- Tutorial Section -->
        <div id="tutorial-section" class="section">
            <div class="tutorial-section">
                <div class="tutorial-header">
                    <h2>Welcome to HOPE-INT-CORE!</h2>
                    <p>Let's get you set up with your Gemini API key to start creating amazing presentations, reports, assignments, and projects</p>
                </div>
                
                <div class="tutorial-steps">
                    <div class="tutorial-step">
                        <div class="step-number">1</div>
                        <div class="step-content">
                            <h3>What is a Gemini API Key?</h3>
                            <p>The Gemini API key is a unique identifier that allows HOPE-INT-CORE to access Google's powerful Gemini AI model to generate your presentations, reports, assignments, and projects. It's like a password that gives our app permission to use Google's AI services.</p>
                            <div class="tutorial-note">
                                <p><strong>Note:</strong> Your API key is private and should never be shared with others. We store it securely in your browser only.</p>
                            </div>
                        </div>
                    </div>
                    
                    <div class="tutorial-step">
                        <div class="step-number">2</div>
                        <div class="step-content">
                            <h3>Getting Your Gemini API Key</h3>
                            <p>Follow these steps to get your free API key from Google:</p>
                            <ul>
                                <li>Go to <a href="https://makersuite.google.com/app/apikey" target="_blank" style="color: #3498db;">Google AI Studio</a></li>
                                <li>Sign in with your Google account</li>
                                <li>Click on "Get API Key" button</li>
                                <li>Choose "Create API key in new project"</li>
                                <li>Create a new project and select it</li>
                                <li>Copy the generated API key</li>
                            </ul>
                            <img src="https://i.ibb.co/fY5w6PhH/Whats-App-Image-2025-09-28-at-11-58-35-PM.jpg" alt="Google AI Studio interface" class="step-image">
                        </div>
                    </div>
                    
                    <div class="tutorial-step">
                        <div class="step-number">3</div>
                        <div class="step-content">
                            <h3>API Key Benefits</h3>
                            <p>With your Gemini API key, you can:</p>
                            <ul>
                                <li>Generate unlimited presentations, reports, assignments, and projects</li>
                                <li>Access the latest AI models</li>
                                <li>Create content in multiple languages</li>
                                <li>Use advanced design features</li>
                                <li>Save and manage your history</li>
                            </ul>
                        </div>
                    </div>
                    
                    <div class="tutorial-step">
                        <div class="step-number">4</div>
                        <div class="step-content">
                            <h3>Security & Privacy</h3>
                            <p>Your API key is stored locally in your browser and is never sent to our servers. Google's AI processes your topics, but we don't store any of your content or personal information.</p>
                            <div class="tutorial-note">
                                <p><strong>Important:</strong> Never share your API key publicly or commit it to code repositories.</p>
                            </div>
                        </div>
                    </div>
                </div>
                
                <div class="tutorial-actions">
                    <button id="got-it-btn" class="splash-continue">I Understand, Take Me to API Key Setup</button>
                </div>
            </div>
        </div>
        
        <!-- API Key Section -->
        <div id="api-key-section" class="section">
            <div class="form-group">
                <label for="api-key">Enter your Gemini API Key:</label>
                <input type="password" id="api-key" placeholder="Your Gemini API Key">
            </div>
            <button id="save-api-key">Save API Key</button>
            <div id="api-status"></div>
            <div style="margin-top: 20px;">
                <button id="show-tutorial-btn" style="background: rgba(52, 152, 219, 0.3);">Need Help? Show Tutorial</button>
            </div>
        </div>
        
        <!-- Loading Screen -->
        <div id="loading-section" class="section">
            <div class="loading-screen">
                <div class="loading-text">AI now Getting ready</div>
                <div class="loading-credit">Developed by Justin</div>
                <div class="loading-credit">Developed under HOPE Research & development Team</div>
                <div class="lottie-container">
                    <lottie-player src="https://assets9.lottiefiles.com/packages/lf20_DMgKk1.json" background="transparent" speed="1" loop autoplay></lottie-player>
                </div>
            </div>
        </div>
        
        <!-- Main Options Section -->
        <div id="main-options-section" class="section">
            <h2>What would you like to create?</h2>
            <div class="main-options">
                <div class="option-card" id="create-ppt-card">
                    <h3>Create Presentation</h3>
                    <p>Generate an interactive 3D presentation with animations and multimedia elements</p>
                </div>
                <div class="option-card" id="create-report-card">
                    <h3>Create Printable Report</h3>
                    <p>Generate a professional report that can be downloaded as PDF</p>
                </div>
                <div class="option-card" id="create-assignment-card">
                    <h3>Create Assignment</h3>
                    <p>Generate a detailed assignment with questions, instructions, and grading criteria</p>
                </div>
                <div class="option-card" id="create-project-card">
                    <h3>Create Complete Project</h3>
                    <p>Generate a complete mini/final year project with source code, documentation, and workflow diagrams</p>
                </div>
            </div>
        </div>
    </div>
    
    <footer>
        Developed under HOPE Research Team | Developed by Justin
    </footer>
    
    <div id="notification" class="notification"></div>

    <script>
        // Application State
        const appState = {
            apiKey: '',
            hasSeenTutorial: false
        };

        // DOM Elements
        const sections = {
            tutorial: document.getElementById('tutorial-section'),
            apiKey: document.getElementById('api-key-section'),
            loading: document.getElementById('loading-section'),
            mainOptions: document.getElementById('main-options-section')
        };

        const elements = {
            splashScreen: document.getElementById('splash-screen'),
            continueToApp: document.getElementById('continue-to-app'),
            gotItBtn: document.getElementById('got-it-btn'),
            showTutorialBtn: document.getElementById('show-tutorial-btn'),
            apiKeyInput: document.getElementById('api-key'),
            saveApiKeyBtn: document.getElementById('save-api-key'),
            apiStatus: document.getElementById('api-status'),
            createPptCard: document.getElementById('create-ppt-card'),
            createReportCard: document.getElementById('create-report-card'),
            createAssignmentCard: document.getElementById('create-assignment-card'),
            createProjectCard: document.getElementById('create-project-card'),
            notification: document.getElementById('notification')
        };

        // Initialize Three.js Background
        function initThreeBackground() {
            const container = document.getElementById('three-background');
            
            // Scene
            const scene = new THREE.Scene();
            
            // Camera
            const camera = new THREE.PerspectiveCamera(75, window.innerWidth / window.innerHeight, 0.1, 1000);
            camera.position.z = 5;
            
            // Renderer
            const renderer = new THREE.WebGLRenderer({ alpha: true });
            renderer.setSize(window.innerWidth, window.innerHeight);
            renderer.setClearColor(0x000000, 0);
            container.appendChild(renderer.domElement);
            
            // Create floating particles
            const particlesGeometry = new THREE.BufferGeometry();
            const particlesCount = 500;
            const posArray = new Float32Array(particlesCount * 3);
            
            for(let i = 0; i < particlesCount * 3; i++) {
                posArray[i] = (Math.random() - 0.5) * 10;
            }
            
            particlesGeometry.setAttribute('position', new THREE.BufferAttribute(posArray, 3));
            
            // Material
            const particlesMaterial = new THREE.PointsMaterial({
                size: 0.02,
                color: 0x3498db,
                transparent: true,
                opacity: 0.8
            });
            
            // Mesh
            const particlesMesh = new THREE.Points(particlesGeometry, particlesMaterial);
            scene.add(particlesMesh);
            
            // Add ambient light
            const ambientLight = new THREE.AmbientLight(0xffffff, 0.5);
            scene.add(ambientLight);
            
            // Animation
            function animate() {
                requestAnimationFrame(animate);
                
                particlesMesh.rotation.x += 0.001;
                particlesMesh.rotation.y += 0.002;
                
                renderer.render(scene, camera);
            }
            
            animate();
            
            // Handle window resize
            window.addEventListener('resize', () => {
                camera.aspect = window.innerWidth / window.innerHeight;
                camera.updateProjectionMatrix();
                renderer.setSize(window.innerWidth, window.innerHeight);
            });
        }

        // Initialize Application
        function initApp() {
            // Show splash screen first
            elements.continueToApp.addEventListener('click', () => {
                elements.splashScreen.style.opacity = '0';
                setTimeout(() => {
                    elements.splashScreen.style.display = 'none';
                    // Initialize Three.js background after splash screen
                    initThreeBackground();
                    
                    // Check if user has seen tutorial
                    const hasSeenTutorial = localStorage.getItem('hasSeenTutorial');
                    if (hasSeenTutorial) {
                        // Check for existing API key
                        const savedApiKey = localStorage.getItem('geminiApiKey');
                        if (savedApiKey) {
                            appState.apiKey = savedApiKey;
                            elements.apiKeyInput.value = savedApiKey;
                            showSection('mainOptions');
                        } else {
                            showSection('apiKey');
                        }
                    } else {
                        // First time user, show tutorial
                        showSection('tutorial');
                    }
                }, 1000);
            });

            // Event Listeners
            elements.saveApiKeyBtn.addEventListener('click', saveApiKey);
            elements.gotItBtn.addEventListener('click', () => {
                localStorage.setItem('hasSeenTutorial', 'true');
                showSection('apiKey');
            });
            elements.showTutorialBtn.addEventListener('click', () => {
                showSection('tutorial');
            });

            // Main options navigation
            elements.createPptCard.addEventListener('click', () => {
                // Will navigate to presentation module
                console.log('Navigate to presentation creation');
            });
            
            elements.createReportCard.addEventListener('click', () => {
                // Will navigate to report module
                console.log('Navigate to report creation');
            });
            
            elements.createAssignmentCard.addEventListener('click', () => {
                // Will navigate to assignment module
                console.log('Navigate to assignment creation');
            });
            
            elements.createProjectCard.addEventListener('click', () => {
                // Will navigate to project module
                console.log('Navigate to project creation');
            });
        }

        // Section Navigation
        function showSection(sectionName) {
            Object.values(sections).forEach(section => {
                section.classList.remove('active');
            });
            sections[sectionName].classList.add('active');
        }

        // API Key Management
        function saveApiKey() {
            const apiKey = elements.apiKeyInput.value.trim();
            if (!apiKey) {
                showNotification('Please enter a valid API key', 'error');
                return;
            }

            // Simple validation - check if it looks like a Gemini API key
            if (!apiKey.startsWith('AIza') || apiKey.length < 20) {
                showNotification('Invalid API key format', 'error');
                return;
            }

            appState.apiKey = apiKey;
            localStorage.setItem('geminiApiKey', apiKey);
            elements.apiStatus.textContent = 'API Key saved successfully!';
            elements.apiStatus.style.color = '#3498db';
            
            // Show loading screen then proceed to main options
            showSection('loading');
            setTimeout(() => {
                showSection('mainOptions');
            }, 3000);
        }

        // Utility Functions
        function showNotification(message, type = 'success') {
            elements.notification.textContent = message;
            elements.notification.className = `notification ${type}`;
            elements.notification.classList.add('show');
            
            setTimeout(() => {
                elements.notification.classList.remove('show');
            }, 3000);
        }

        // Initialize the application when DOM is loaded
        document.addEventListener('DOMContentLoaded', initApp);
    </script>
</body>
</html>